{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u4ecb\u7ecd \u8fd9\u662fTreeDy\u57fa\u4e8emkdocs\u5236\u4f5c\u7684\u4e00\u4e2a\u9759\u6001\u7f51\u7ad9\uff0c\u7528\u4e8e\u505a\u6280\u672f\u6808\u7684\u8bb0\u5f55\u548c\u5206\u4eab\u3002TreeDy\u672c\u4eba\u559c\u6b22\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6280\u672f\uff0c\u662f\u4e00\u4e2a\u521d\u5b66\u8005\uff0c\u8fd9\u91cc\u8bb0\u5f55\u4e86\u4ed6\u5728\u5b66\u4e60\u4e00\u4e9b\u6709\u8da3\u7684\u6280\u672f\u7684\u8fc7\u7a0b\uff0c\u5e0c\u671b\u6709\u4e00\u5929\u80fd\u591f\u5e2e\u52a9\u5230\u4e00\u4e9b\u4eba\u3002 \u8054\u7cfb\u65b9\u5f0f Info \u7535\u5b50\u90ae\u4ef6\uff1a2032974@tongji.edu.cn \u4e0a\u6d77\u5e02\u540c\u6d4e\u5927\u5b66\u5609\u5b9a\u6821\u533a","title":"Home"},{"location":"#_1","text":"\u8fd9\u662fTreeDy\u57fa\u4e8emkdocs\u5236\u4f5c\u7684\u4e00\u4e2a\u9759\u6001\u7f51\u7ad9\uff0c\u7528\u4e8e\u505a\u6280\u672f\u6808\u7684\u8bb0\u5f55\u548c\u5206\u4eab\u3002TreeDy\u672c\u4eba\u559c\u6b22\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6280\u672f\uff0c\u662f\u4e00\u4e2a\u521d\u5b66\u8005\uff0c\u8fd9\u91cc\u8bb0\u5f55\u4e86\u4ed6\u5728\u5b66\u4e60\u4e00\u4e9b\u6709\u8da3\u7684\u6280\u672f\u7684\u8fc7\u7a0b\uff0c\u5e0c\u671b\u6709\u4e00\u5929\u80fd\u591f\u5e2e\u52a9\u5230\u4e00\u4e9b\u4eba\u3002","title":"\u4ecb\u7ecd"},{"location":"#_2","text":"Info \u7535\u5b50\u90ae\u4ef6\uff1a2032974@tongji.edu.cn \u4e0a\u6d77\u5e02\u540c\u6d4e\u5927\u5b66\u5609\u5b9a\u6821\u533a","title":"\u8054\u7cfb\u65b9\u5f0f"},{"location":"blogs/CheapChatGPT/","text":"LLaMa Alpaca Vicuna Databricks-Dolly","title":"\u5404\u7c7bChatGPT\u7684\u5e73\u66ff\u7684\u5c1d\u8bd5"},{"location":"blogs/CheapChatGPT/#llama","text":"","title":"LLaMa"},{"location":"blogs/CheapChatGPT/#alpaca","text":"","title":"Alpaca"},{"location":"blogs/CheapChatGPT/#vicuna","text":"","title":"Vicuna"},{"location":"blogs/CheapChatGPT/#databricks-dolly","text":"","title":"Databricks-Dolly"},{"location":"blogs/DistributedTraining/","text":"\u5982\u679c\u60f3\u8981\u505a\u66f4\u591a\u7684\u4e8b\uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\uff0c\u5c24\u5176\u5728LLM\u6210\u4e3a\u70ed\u70b9\u7684\u4eca\u5929\u3002\u8fd9\u7bc7Blog\u57fa\u4e8eTorch\u7684\u5b98\u65b9\u5206\u5e03\u5f0f\u6559\u7a0b\uff0c\u7b80\u5355\u7684\u4ecb\u7ecdTorch\u4e2d\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002 Dataparallel \u548c DistributedDataParallel nn.DataParallel() \u91c7\u7528 nn.DataParallel() \u53ef\u4ee5\u4f7f\u7528\u6700\u5c11\u7684\u4ee3\u7801\u5b9e\u73b0\u5355\u673a\u4e0a\u7684\u591a\u5361\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u5047\u8bbe\u6211\u5df2\u7ecf\u5b9e\u4f8b\u5316\u4e86 model \uff0c\u5e76\u51c6\u5907\u597d\u4e86\u90a3\u4e48\u53ea\u9700\u8981\u5728\u5c06\u6a21\u578b\u653e\u5728device\u524d\u91c7\u7528 DataParallel() \u5305\u88c5\u4e00\u4e0b\u5373\u53ef\uff1a \u901a\u5e38 \u4f7f\u7528nn.DataParallel()\u5305\u88c5 Seq2Seq.py 1 2 device = torch . device ( \"cuda:0\" if torch . cuda . is_available () else \"cpu\" ) model . to ( device ) Seq2Seq.py 1 2 device_lis = [ torch . cuda . device ( i ) for i in range ( torch . cuda . device_count ())] model = nn . DataParallel ( model , device_ids = device_lis ) Note \u8fd9\u79cd\u65b9\u5f0f\u662f\u5355\u8fdb\u7a0b\u591a\u7ebf\u7a0b\u7684\uff0c\u7531\u4e8ePython\u7684GIL\uff0c\u8fd9\u5b9e\u73b0\u7684\u5e76\u975e\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u591a\u7ebf\u7a0b\u3002 nn.parallel.DistributedDataParallel() \u5b98\u65b9\u7684Tutorials\u6781\u529b\u63a8\u8350\u4f7f\u7528\u5b83\u66ff\u4ee3\u4e0a\u8ff0\u7684 nn.DataParallel() \uff0c\u539f\u56e0\u6709\u4ee5\u4e0b\u4e09\u70b9: DataParallel() \u53ea\u9002\u7528\u4e8e\u5728\u5355\u673a\u591a\u5361\u7684\u60c5\u51b5\uff0c\u800c DistributedDataParallel() \u8fd8\u9002\u7528\u4e8e\u591a\u673a\u591a\u5361\uff1b DataParallel() \u7528\u5355\u8fdb\u7a0b+\u591a\u7ebf\u7a0b\u5b9e\u73b0\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u800c DistributedDataParallel() \u7528\u591a\u8fdb\u7a0b\u5b9e\u73b0\u5206\u5e03\u5f0f\u8bad\u7ec3\uff1b DistributedDataParallel() \u652f\u6301\u5c06\u6a21\u578b\u7684\u5b9e\u4f8b\u7684\u4e0d\u540c\u5c42\u653e\u5728\u4e0d\u540c\u7684GPU\u4e0a\uff0c\u800c DataParallel() \u53ea\u80fd\u5c06\u6a21\u578b\u7684\u5b9e\u4f8b\u90fd\u653e\u5728\u76f8\u540c\u7684GPU\u4e0a\u3002 \u5b9e\u7528\u4ee3\u7801 \u5f15\u5165\u5e93 import os import sys import tempfile import torch import torch.distributed as dist import torch.nn as nn import torch.optim as optim import torch.multiprocessing as mp from torch.nn.parallel import DistributedDataParallel as DDP PyTorch\u5728\u5b98\u65b9 Tutorial \u4e2d\u63d0\u4f9b\u4e86\u4e09\u4e2a\u4f8b\u5b50\uff0c\u6700\u57fa\u7840\u7684\u4f7f\u7528\u65b9\u5f0f\u9700\u8981\u5305\u62ec\u4e09\u4e2a\u57fa\u672c\u6b65\u9aa4\uff1a \u6dfb\u52a0\u73af\u5883\u53d8\u91cf\u5e76\u521d\u59cb\u5316\u8fdb\u7a0b\u7ec4: def setup ( rank , world_size ): os . environ [ 'MASTER_ADDR' ] = 'localhost' os . environ [ 'MASTER_PORT' ] = '12355' # initialize the process group dist . init_process_group ( \"gloo\" , rank = rank , world_size = world_size ) \u8fd9\u91cc\u7684 rank \u548c world_size \u9700\u8981\u52a0\u4ee5\u89e3\u91ca\uff0c rank \u8868\u793a\u5168\u5c40\u7684\u8fdb\u7a0b\u7f16\u53f7\uff0c world_size \u8868\u793a\u5355\u53f0\u4e3b\u673a\u4e0a\u7684\u8fdb\u7a0b\u6570\uff0c\u4f8b\u5982\u6211\u4e00\u5171\u6709\u4e24\u53f0\u4e3b\u673a\uff0c\u6bcf\u53f0\u4e3b\u673a\u4e0a\u6709\u56db\u5f20GPU\uff0c\u5e76\u4e14\u4e00\u5f20GPU\u90fd\u8db3\u591f\u6211\u653e\u4e0b model \u548c\u8bad\u7ec3\u7684\u6570\u636e\uff0c\u90a3\u4e48\u6211\u5e0c\u671b\u4e3a\u6bcf\u5f20\u663e\u5361\u90fd\u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u4e3a\u5b83\u4eec\u4ece0\u5f00\u59cb\u8fdb\u884c\u7f16\u53f7\uff0c\u90a3\u4e48\u5c31\u4e00\u5171\u6709 0, 1, 2, ..., 6, 7 \u516b\u4e2a\u8fdb\u7a0b\uff0c\u8fd9\u91cc\u7684\u7f16\u53f7\u5c31\u662f rank \uff0c\u800c world_size \u5219\u662f\u6bcf\u53f0\u4e3b\u673a\u4e0a\u521b\u5efa\u7684\u8fdb\u7a0b\u6570\uff0c\u5b83\u7b49\u4e8e\u6bcf\u53f0\u4e3b\u673a\u4e0a\u7684GPU\u6570\u91cf\u3002 \u521d\u59cb\u5316\u6a21\u578b model \u5e76\u4f7f\u7528 DistributedDataParallel() \u5305\u88c5\uff0c\u5047\u8bbe\u4e00\u4e2a\u8f93\u5165 data \u548c\u5bf9\u5e94\u7684\u6807\u7b7e label : def demo_basic ( rank , world_size ): print ( f \"Running basic DDP example on rank { rank } .\" ) # \u8c03\u7528\u521a\u624d\u5b9a\u4e49\u597d\u7684setup\u51fd\u6570\u5e76\u521d\u59cb\u5316\u6a21\u578b setup ( rank , world_size ) # \u7528DDP\u5305\u88c5\u6a21\u578b\uff0c\u5e76\u6307\u5b9a\u5f53\u524d\u6a21\u578b\u6240\u5728\u7684\u8fdb\u7a0b\u53f7(\u8bbe\u5907\u53f7) model = ToyModel () ddp_model = DDP ( model , device_ids = [ rank ]) # \u5b9a\u4e49loss_function\u548coptimizer loss_fn = nn . MSELoss () optimizer = optim . SGD ( ddp_model . parameters (), lr = 0.001 ) optimizer . zero_grad () # \u5c06data\u548clabels\u653e\u5728\u5f53\u524d\u8fdb\u7a0b\u7684GPU\u4e0a data , label = data . to ( rank ), label . to ( rank ) outputs = ddp_model ( data ) # \u53cd\u5411\u4f20\u64ad\u548c\u66f4\u65b0\u53c2\u6570 loss_fn ( outputs , label ) . backward () optimizer . step () # \u91ca\u653e\u8fdb\u7a0b\u7ec4 dist . distroy_process_group () \u8fd9\u91ccdemo_basic\u51fd\u6570\u4e2d\u7684 model \u4e5f\u5c31\u662f\u7ee7\u627f nn.Module \u540e\u7684\u7c7b\u7684\u5b9e\u4f8b\u3002\u5728\u524d\u9762\u6211\u4eec\u63d0\u5230\u4e86 DistributedDataParallel \u4e5f\u9002\u7528\u4e8e\u4e00\u4e2a\u6a21\u578b\u653e\u7f6e\u5728\u591a\u5f20\u5361\u4e0a\u7684\u60c5\u51b5\uff0c\u8fd9\u9700\u8981\u5728\u5b9a\u4e49\u6a21\u578b\u7684\u7c7b\u65f6\uff0c\u5728 __init__ \u51fd\u6570\u4e2d\u6dfb\u52a0 dev \u53c2\u6570\uff0cTorch\u5b98\u65b9\u7ed9\u51fa\u4e86\u4e24\u79cd\u793a\u4f8b\uff1a \u5355\u5f20\u5361\u4e0a\u7684\u6a21\u578b\u5b9a\u4e49\u793a\u4f8b class ToyModel ( nn . Module ): def __init__ ( self ): super ( ToyModel , self ) . __init__ () self . net1 = nn . Linear ( 10 , 10 ) self . relu = nn . ReLU () self . net2 = nn . Linear ( 10 , 5 ) def forward ( self , x ): return self . net2 ( self . relu ( self . net1 ( x ))) \u591a\u5f20\u5361\u4e0a\u7684\u6a21\u578b\u5b9a\u4e49\u793a\u4f8b class ToyMpModel ( nn . Module ): def __init__ ( self , dev0 , dev1 ): super ( ToyMpModel , self ) . __init__ () self . dev0 = dev0 self . dev1 = dev1 self . net1 = torch . nn . Linear ( 10 , 10 ) . to ( dev0 ) self . relu = torch . nn . ReLU () self . net2 = torch . nn . Linear ( 10 , 5 ) . to ( dev1 ) def forward ( self , x ): x = x . to ( self . dev0 ) x = self . relu ( self . net1 ( x )) x = x . to ( self . dev1 ) return self . net2 ( x ) \u5bf9\u6bd4\u53ef\u4ee5\u53d1\u73b0\uff0c\u591a\u5f20\u5361\u4e0a\u7684\u6a21\u578b\u5c06 self.net1 \u548c self.net2 \u5206\u522b\u5b9a\u4e49\u5728\u4e86 dev0 \u548c dev1 \u4e0a\uff0c\u4e8b\u5b9e\u4e0a\u5c31\u662f\u4e24\u5f20\u4e0d\u540c\u7684\u5361\u7684device_id\uff0c\u5e76\u4e14\u5728 forward \u51fd\u6570\u4e2d\uff0c\u8f93\u5165 x \u6700\u5f00\u59cb\u5728 dev0 \u4e0a\u8fdb\u884c\u5904\u7406\uff0c\u6700\u7ec8\u7684\u8f93\u51fa\u662f\u5728 dev1 \u4e0a\u7684\u3002\u56e0\u800c\u9488\u5bf9\u9700\u8981\u653e\u5728\u591a\u5f20\u5361\u4e0a\u7684\u6a21\u578b\uff0c\u9700\u8981\u4e3a\u5b83\u6307\u5b9adev0\u548cdev1\u5177\u4f53\u7684 local rank : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def demo_basic ( rank , world_size ): print ( f \"Running basic DDP example on rank { rank } .\" ) # \u8c03\u7528\u521a\u624d\u5b9a\u4e49\u597d\u7684setup\u51fd\u6570\u5e76\u521d\u59cb\u5316\u6a21\u578b setup ( rank , world_size ) # \u4e3a\u591a\u5f20\u5361\u4e0a\u7684\u6a21\u578b\u6307\u5b9adev0\u548cdev1\uff0clocal rank \u9700\u8981\u5bf9world_size\u53d6\u6a21 dev0 = ( rank * 2 ) % world_size dev1 = ( rank * 2 + 1 ) % world_size # \u7528DDP\u5305\u88c5\u6a21\u578b\uff0c\u6ce8\u610f\u4e0e\u5355\u5361\u6a21\u578b\u4e0d\u540c\u7684\u662f\u4e0d\u8981\u6307\u5b9adevice_ids model = ToyMpModel ( dev0 , dev1 ) ddp_model = DDP ( model ) # \u5b9a\u4e49loss_function\u548coptimizer loss_fn = nn . MSELoss () optimizer = optim . SGD ( ddp_model . parameters (), lr = 0.001 ) optimizer . zero_grad () # \u5c06data\u548clabels\u653e\u5728\u5bf9\u5e94\u7684GPU\u4e0a data , labels = data . to ( dev0 ), labels . to ( dev1 ) outputs = ddp_model ( data ) # \u53cd\u5411\u4f20\u64ad\u548c\u66f4\u65b0\u53c2\u6570 loss_fn ( outputs , labels ) . backward () optimizer . step () # \u91ca\u653e\u8fdb\u7a0b\u7ec4 dist . distroy_process_group () \u53ef\u4ee5\u770b\u5230\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u5b9e\u9645\u4e0a\u662f\u5c06rank\u8fde\u7eed\u7684\u4e3a\u5076\u6570\u548c\u5947\u6570\u7684\u4e24\u5757GPU\u5206\u522b\u4f5c\u4e3a dev0 \u548c dev1 \uff0c\u5e76\u4e14\u8f93\u51fa\u7684 outputs \u4e5f\u662f\u5728 dev1 \u4e0a\u4e0e label \u4e00\u8d77\u53c2\u4e0eloss\u7684\u8ba1\u7b97\u3002 \u91c7\u7528spawn\u65b9\u5f0f\u542f\u52a8\u8fdb\u7a0b: if __name__ == \"__main__\" : wold_size = torch . cuda . device_count () mp . spawn ( demo_fn = demo_basic , args = ( world_size ,), nprocs = world_size , join = True ) DDP\u6a21\u578b\u7684\u4fdd\u5b58\u548c\u52a0\u8f7d DDP\u7684\u5e76\u884c\u662f\u901a\u8fc7\u4e0d\u540c\u8fdb\u7a0b\u4e4b\u95f4\u7ef4\u62a4\u4e00\u4e2a\u5171\u540c\u7684optimizer\u5b9e\u73b0\u7684\uff0c\u5982\u679c\u6bcf\u5f20\u663e\u5361\u8d1f\u8d23\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u7531\u4e8e\u6bcf\u5f20\u663e\u5361\u4e0a\u7684\u6a21\u578b\u53c2\u6570\u90fd\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u4fdd\u5b58\u4e00\u4efd\u6a21\u578b\u53c2\u6570\u5373\u53ef\uff0c\u5373\u5047\u5b9a\u6211\u5df2\u7ecf\u6307\u5b9a\u6a21\u578b\u7684checkpoint\u8def\u5f84\u4e3a model_path \uff0c\u90a3\u4e48\u53ea\u9700\u8981\u5728\u4e3b\u8fdb\u7a0b\u4e2d\u4fdd\u5b58\u6a21\u578b\u53c2\u6570\u5373\u53ef\uff0c\u5373\u5728 demo_basic \u51fd\u6570\u4e2d\u52a0\u5165\u5982\u4e0b\u4ee3\u7801: \u53c2\u8003\u8d44\u6599 GETTING STARTED WITH DISTRIBUTED DATA PARALLEL","title":"\u7528PyTorch\u8fdb\u884c\u5206\u5e03\u5f0f\u7684\u6a21\u578b\u8bad\u7ec3"},{"location":"blogs/DistributedTraining/#dataparallel-distributeddataparallel","text":"","title":"Dataparallel \u548c DistributedDataParallel"},{"location":"blogs/DistributedTraining/#nndataparallel","text":"\u91c7\u7528 nn.DataParallel() \u53ef\u4ee5\u4f7f\u7528\u6700\u5c11\u7684\u4ee3\u7801\u5b9e\u73b0\u5355\u673a\u4e0a\u7684\u591a\u5361\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u5047\u8bbe\u6211\u5df2\u7ecf\u5b9e\u4f8b\u5316\u4e86 model \uff0c\u5e76\u51c6\u5907\u597d\u4e86\u90a3\u4e48\u53ea\u9700\u8981\u5728\u5c06\u6a21\u578b\u653e\u5728device\u524d\u91c7\u7528 DataParallel() \u5305\u88c5\u4e00\u4e0b\u5373\u53ef\uff1a \u901a\u5e38 \u4f7f\u7528nn.DataParallel()\u5305\u88c5 Seq2Seq.py 1 2 device = torch . device ( \"cuda:0\" if torch . cuda . is_available () else \"cpu\" ) model . to ( device ) Seq2Seq.py 1 2 device_lis = [ torch . cuda . device ( i ) for i in range ( torch . cuda . device_count ())] model = nn . DataParallel ( model , device_ids = device_lis ) Note \u8fd9\u79cd\u65b9\u5f0f\u662f\u5355\u8fdb\u7a0b\u591a\u7ebf\u7a0b\u7684\uff0c\u7531\u4e8ePython\u7684GIL\uff0c\u8fd9\u5b9e\u73b0\u7684\u5e76\u975e\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u591a\u7ebf\u7a0b\u3002","title":"nn.DataParallel()"},{"location":"blogs/DistributedTraining/#nnparalleldistributeddataparallel","text":"\u5b98\u65b9\u7684Tutorials\u6781\u529b\u63a8\u8350\u4f7f\u7528\u5b83\u66ff\u4ee3\u4e0a\u8ff0\u7684 nn.DataParallel() \uff0c\u539f\u56e0\u6709\u4ee5\u4e0b\u4e09\u70b9: DataParallel() \u53ea\u9002\u7528\u4e8e\u5728\u5355\u673a\u591a\u5361\u7684\u60c5\u51b5\uff0c\u800c DistributedDataParallel() \u8fd8\u9002\u7528\u4e8e\u591a\u673a\u591a\u5361\uff1b DataParallel() \u7528\u5355\u8fdb\u7a0b+\u591a\u7ebf\u7a0b\u5b9e\u73b0\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u800c DistributedDataParallel() \u7528\u591a\u8fdb\u7a0b\u5b9e\u73b0\u5206\u5e03\u5f0f\u8bad\u7ec3\uff1b DistributedDataParallel() \u652f\u6301\u5c06\u6a21\u578b\u7684\u5b9e\u4f8b\u7684\u4e0d\u540c\u5c42\u653e\u5728\u4e0d\u540c\u7684GPU\u4e0a\uff0c\u800c DataParallel() \u53ea\u80fd\u5c06\u6a21\u578b\u7684\u5b9e\u4f8b\u90fd\u653e\u5728\u76f8\u540c\u7684GPU\u4e0a\u3002","title":"nn.parallel.DistributedDataParallel()"},{"location":"blogs/DistributedTraining/#_1","text":"\u5f15\u5165\u5e93 import os import sys import tempfile import torch import torch.distributed as dist import torch.nn as nn import torch.optim as optim import torch.multiprocessing as mp from torch.nn.parallel import DistributedDataParallel as DDP PyTorch\u5728\u5b98\u65b9 Tutorial \u4e2d\u63d0\u4f9b\u4e86\u4e09\u4e2a\u4f8b\u5b50\uff0c\u6700\u57fa\u7840\u7684\u4f7f\u7528\u65b9\u5f0f\u9700\u8981\u5305\u62ec\u4e09\u4e2a\u57fa\u672c\u6b65\u9aa4\uff1a \u6dfb\u52a0\u73af\u5883\u53d8\u91cf\u5e76\u521d\u59cb\u5316\u8fdb\u7a0b\u7ec4: def setup ( rank , world_size ): os . environ [ 'MASTER_ADDR' ] = 'localhost' os . environ [ 'MASTER_PORT' ] = '12355' # initialize the process group dist . init_process_group ( \"gloo\" , rank = rank , world_size = world_size ) \u8fd9\u91cc\u7684 rank \u548c world_size \u9700\u8981\u52a0\u4ee5\u89e3\u91ca\uff0c rank \u8868\u793a\u5168\u5c40\u7684\u8fdb\u7a0b\u7f16\u53f7\uff0c world_size \u8868\u793a\u5355\u53f0\u4e3b\u673a\u4e0a\u7684\u8fdb\u7a0b\u6570\uff0c\u4f8b\u5982\u6211\u4e00\u5171\u6709\u4e24\u53f0\u4e3b\u673a\uff0c\u6bcf\u53f0\u4e3b\u673a\u4e0a\u6709\u56db\u5f20GPU\uff0c\u5e76\u4e14\u4e00\u5f20GPU\u90fd\u8db3\u591f\u6211\u653e\u4e0b model \u548c\u8bad\u7ec3\u7684\u6570\u636e\uff0c\u90a3\u4e48\u6211\u5e0c\u671b\u4e3a\u6bcf\u5f20\u663e\u5361\u90fd\u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u4e3a\u5b83\u4eec\u4ece0\u5f00\u59cb\u8fdb\u884c\u7f16\u53f7\uff0c\u90a3\u4e48\u5c31\u4e00\u5171\u6709 0, 1, 2, ..., 6, 7 \u516b\u4e2a\u8fdb\u7a0b\uff0c\u8fd9\u91cc\u7684\u7f16\u53f7\u5c31\u662f rank \uff0c\u800c world_size \u5219\u662f\u6bcf\u53f0\u4e3b\u673a\u4e0a\u521b\u5efa\u7684\u8fdb\u7a0b\u6570\uff0c\u5b83\u7b49\u4e8e\u6bcf\u53f0\u4e3b\u673a\u4e0a\u7684GPU\u6570\u91cf\u3002 \u521d\u59cb\u5316\u6a21\u578b model \u5e76\u4f7f\u7528 DistributedDataParallel() \u5305\u88c5\uff0c\u5047\u8bbe\u4e00\u4e2a\u8f93\u5165 data \u548c\u5bf9\u5e94\u7684\u6807\u7b7e label : def demo_basic ( rank , world_size ): print ( f \"Running basic DDP example on rank { rank } .\" ) # \u8c03\u7528\u521a\u624d\u5b9a\u4e49\u597d\u7684setup\u51fd\u6570\u5e76\u521d\u59cb\u5316\u6a21\u578b setup ( rank , world_size ) # \u7528DDP\u5305\u88c5\u6a21\u578b\uff0c\u5e76\u6307\u5b9a\u5f53\u524d\u6a21\u578b\u6240\u5728\u7684\u8fdb\u7a0b\u53f7(\u8bbe\u5907\u53f7) model = ToyModel () ddp_model = DDP ( model , device_ids = [ rank ]) # \u5b9a\u4e49loss_function\u548coptimizer loss_fn = nn . MSELoss () optimizer = optim . SGD ( ddp_model . parameters (), lr = 0.001 ) optimizer . zero_grad () # \u5c06data\u548clabels\u653e\u5728\u5f53\u524d\u8fdb\u7a0b\u7684GPU\u4e0a data , label = data . to ( rank ), label . to ( rank ) outputs = ddp_model ( data ) # \u53cd\u5411\u4f20\u64ad\u548c\u66f4\u65b0\u53c2\u6570 loss_fn ( outputs , label ) . backward () optimizer . step () # \u91ca\u653e\u8fdb\u7a0b\u7ec4 dist . distroy_process_group () \u8fd9\u91ccdemo_basic\u51fd\u6570\u4e2d\u7684 model \u4e5f\u5c31\u662f\u7ee7\u627f nn.Module \u540e\u7684\u7c7b\u7684\u5b9e\u4f8b\u3002\u5728\u524d\u9762\u6211\u4eec\u63d0\u5230\u4e86 DistributedDataParallel \u4e5f\u9002\u7528\u4e8e\u4e00\u4e2a\u6a21\u578b\u653e\u7f6e\u5728\u591a\u5f20\u5361\u4e0a\u7684\u60c5\u51b5\uff0c\u8fd9\u9700\u8981\u5728\u5b9a\u4e49\u6a21\u578b\u7684\u7c7b\u65f6\uff0c\u5728 __init__ \u51fd\u6570\u4e2d\u6dfb\u52a0 dev \u53c2\u6570\uff0cTorch\u5b98\u65b9\u7ed9\u51fa\u4e86\u4e24\u79cd\u793a\u4f8b\uff1a \u5355\u5f20\u5361\u4e0a\u7684\u6a21\u578b\u5b9a\u4e49\u793a\u4f8b class ToyModel ( nn . Module ): def __init__ ( self ): super ( ToyModel , self ) . __init__ () self . net1 = nn . Linear ( 10 , 10 ) self . relu = nn . ReLU () self . net2 = nn . Linear ( 10 , 5 ) def forward ( self , x ): return self . net2 ( self . relu ( self . net1 ( x ))) \u591a\u5f20\u5361\u4e0a\u7684\u6a21\u578b\u5b9a\u4e49\u793a\u4f8b class ToyMpModel ( nn . Module ): def __init__ ( self , dev0 , dev1 ): super ( ToyMpModel , self ) . __init__ () self . dev0 = dev0 self . dev1 = dev1 self . net1 = torch . nn . Linear ( 10 , 10 ) . to ( dev0 ) self . relu = torch . nn . ReLU () self . net2 = torch . nn . Linear ( 10 , 5 ) . to ( dev1 ) def forward ( self , x ): x = x . to ( self . dev0 ) x = self . relu ( self . net1 ( x )) x = x . to ( self . dev1 ) return self . net2 ( x ) \u5bf9\u6bd4\u53ef\u4ee5\u53d1\u73b0\uff0c\u591a\u5f20\u5361\u4e0a\u7684\u6a21\u578b\u5c06 self.net1 \u548c self.net2 \u5206\u522b\u5b9a\u4e49\u5728\u4e86 dev0 \u548c dev1 \u4e0a\uff0c\u4e8b\u5b9e\u4e0a\u5c31\u662f\u4e24\u5f20\u4e0d\u540c\u7684\u5361\u7684device_id\uff0c\u5e76\u4e14\u5728 forward \u51fd\u6570\u4e2d\uff0c\u8f93\u5165 x \u6700\u5f00\u59cb\u5728 dev0 \u4e0a\u8fdb\u884c\u5904\u7406\uff0c\u6700\u7ec8\u7684\u8f93\u51fa\u662f\u5728 dev1 \u4e0a\u7684\u3002\u56e0\u800c\u9488\u5bf9\u9700\u8981\u653e\u5728\u591a\u5f20\u5361\u4e0a\u7684\u6a21\u578b\uff0c\u9700\u8981\u4e3a\u5b83\u6307\u5b9adev0\u548cdev1\u5177\u4f53\u7684 local rank : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def demo_basic ( rank , world_size ): print ( f \"Running basic DDP example on rank { rank } .\" ) # \u8c03\u7528\u521a\u624d\u5b9a\u4e49\u597d\u7684setup\u51fd\u6570\u5e76\u521d\u59cb\u5316\u6a21\u578b setup ( rank , world_size ) # \u4e3a\u591a\u5f20\u5361\u4e0a\u7684\u6a21\u578b\u6307\u5b9adev0\u548cdev1\uff0clocal rank \u9700\u8981\u5bf9world_size\u53d6\u6a21 dev0 = ( rank * 2 ) % world_size dev1 = ( rank * 2 + 1 ) % world_size # \u7528DDP\u5305\u88c5\u6a21\u578b\uff0c\u6ce8\u610f\u4e0e\u5355\u5361\u6a21\u578b\u4e0d\u540c\u7684\u662f\u4e0d\u8981\u6307\u5b9adevice_ids model = ToyMpModel ( dev0 , dev1 ) ddp_model = DDP ( model ) # \u5b9a\u4e49loss_function\u548coptimizer loss_fn = nn . MSELoss () optimizer = optim . SGD ( ddp_model . parameters (), lr = 0.001 ) optimizer . zero_grad () # \u5c06data\u548clabels\u653e\u5728\u5bf9\u5e94\u7684GPU\u4e0a data , labels = data . to ( dev0 ), labels . to ( dev1 ) outputs = ddp_model ( data ) # \u53cd\u5411\u4f20\u64ad\u548c\u66f4\u65b0\u53c2\u6570 loss_fn ( outputs , labels ) . backward () optimizer . step () # \u91ca\u653e\u8fdb\u7a0b\u7ec4 dist . distroy_process_group () \u53ef\u4ee5\u770b\u5230\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u5b9e\u9645\u4e0a\u662f\u5c06rank\u8fde\u7eed\u7684\u4e3a\u5076\u6570\u548c\u5947\u6570\u7684\u4e24\u5757GPU\u5206\u522b\u4f5c\u4e3a dev0 \u548c dev1 \uff0c\u5e76\u4e14\u8f93\u51fa\u7684 outputs \u4e5f\u662f\u5728 dev1 \u4e0a\u4e0e label \u4e00\u8d77\u53c2\u4e0eloss\u7684\u8ba1\u7b97\u3002 \u91c7\u7528spawn\u65b9\u5f0f\u542f\u52a8\u8fdb\u7a0b: if __name__ == \"__main__\" : wold_size = torch . cuda . device_count () mp . spawn ( demo_fn = demo_basic , args = ( world_size ,), nprocs = world_size , join = True )","title":"\u5b9e\u7528\u4ee3\u7801"},{"location":"blogs/DistributedTraining/#ddp","text":"DDP\u7684\u5e76\u884c\u662f\u901a\u8fc7\u4e0d\u540c\u8fdb\u7a0b\u4e4b\u95f4\u7ef4\u62a4\u4e00\u4e2a\u5171\u540c\u7684optimizer\u5b9e\u73b0\u7684\uff0c\u5982\u679c\u6bcf\u5f20\u663e\u5361\u8d1f\u8d23\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u7531\u4e8e\u6bcf\u5f20\u663e\u5361\u4e0a\u7684\u6a21\u578b\u53c2\u6570\u90fd\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u4fdd\u5b58\u4e00\u4efd\u6a21\u578b\u53c2\u6570\u5373\u53ef\uff0c\u5373\u5047\u5b9a\u6211\u5df2\u7ecf\u6307\u5b9a\u6a21\u578b\u7684checkpoint\u8def\u5f84\u4e3a model_path \uff0c\u90a3\u4e48\u53ea\u9700\u8981\u5728\u4e3b\u8fdb\u7a0b\u4e2d\u4fdd\u5b58\u6a21\u578b\u53c2\u6570\u5373\u53ef\uff0c\u5373\u5728 demo_basic \u51fd\u6570\u4e2d\u52a0\u5165\u5982\u4e0b\u4ee3\u7801:","title":"DDP\u6a21\u578b\u7684\u4fdd\u5b58\u548c\u52a0\u8f7d"},{"location":"blogs/DistributedTraining/#_2","text":"GETTING STARTED WITH DISTRIBUTED DATA PARALLEL","title":"\u53c2\u8003\u8d44\u6599"},{"location":"blogs/FactorViewer/","text":"\u57fa\u7840\u56fe\u7eb8 \u6982\u5ff5 \u4e0a\u4f4d\u673a\uff08Host Computer, Master or Supervisor\uff09\u662f\u4e00\u4e2a\u901a\u5e38\u7528\u4e8e\u76d1\u63a7\u548c\u63a7\u5236\u751f\u4ea7\u7ebf\u3001\u5de5\u5382\u8bbe\u5907\u6216\u5de5\u4e1a\u81ea\u52a8\u5316\u7cfb\u7edf\u7684\u8ba1\u7b97\u673a\u3002\u4e0a\u4f4d\u673a\u4e0e\u4e0b\u4f4d\u673a\uff08\u88ab\u63a7\u5236\u8bbe\u5907\uff0c\u5982\u751f\u4ea7\u7ebf\u4e0a\u7684\u8bbe\u5907\u3001\u673a\u5668\u4eba\u7b49\uff09\u76f8\u4e92\u914d\u5408\uff0c\u901a\u8fc7\u901a\u4fe1\u534f\u8bae\uff08\u5982Modbus\u3001CAN\u3001\u4ee5\u592a\u7f51\u7b49\uff09\u8fdb\u884c\u6570\u636e\u4ea4\u6362\u548c\u6307\u4ee4\u4f20\u8f93\u3002 \u4e0a\u4f4d\u673a\u7684\u4e3b\u8981\u804c\u8d23\u5305\u62ec\uff1a \u76d1\u63a7\u548c\u63a7\u5236\uff1a\u4e0a\u4f4d\u673a\u53ef\u4ee5\u5b9e\u65f6\u76d1\u63a7\u4e0b\u4f4d\u673a\u7684\u72b6\u6001\u548c\u6570\u636e\uff0c\u5e76\u5bf9\u5176\u53d1\u9001\u63a7\u5236\u547d\u4ee4\uff0c\u5982\u542f\u52a8\u3001\u505c\u6b62\u3001\u8c03\u6574\u53c2\u6570\u7b49\u3002 \u6570\u636e\u91c7\u96c6\u4e0e\u5904\u7406\uff1a\u4e0a\u4f4d\u673a\u53ef\u4ee5\u6536\u96c6\u4e0b\u4f4d\u673a\u7684\u6570\u636e\uff0c\u5982\u4f20\u611f\u5668\u8bfb\u6570\u3001\u8bbe\u5907\u72b6\u6001\u7b49\uff0c\u5e76\u5bf9\u8fd9\u4e9b\u6570\u636e\u8fdb\u884c\u5904\u7406\u3001\u5206\u6790\u548c\u5b58\u50a8\u3002 \u6545\u969c\u8bca\u65ad\u4e0e\u62a5\u8b66\uff1a\u4e0a\u4f4d\u673a\u53ef\u4ee5\u5bf9\u4e0b\u4f4d\u673a\u53d1\u51fa\u7684\u6545\u969c\u6216\u5f02\u5e38\u4fe1\u53f7\u8fdb\u884c\u8bca\u65ad\uff0c\u5e76\u91c7\u53d6\u76f8\u5e94\u63aa\u65bd\uff0c\u5982\u53d1\u51fa\u62a5\u8b66\u3001\u505c\u6b62\u8bbe\u5907\u7b49\u3002 \u4eba\u673a\u754c\u9762\uff08HMI\uff09\uff1a\u4e0a\u4f4d\u673a\u901a\u5e38\u63d0\u4f9b\u4e00\u79cd\u4eba\u673a\u754c\u9762\uff0c\u4ee5\u4fbf\u64cd\u4f5c\u5458\u548c\u7ba1\u7406\u5458\u76d1\u63a7\u7cfb\u7edf\u72b6\u6001\u3001\u63a7\u5236\u8bbe\u5907\u3001\u67e5\u770b\u6570\u636e\u62a5\u8868\u7b49\u3002 \u901a\u4fe1\uff1a\u4e0a\u4f4d\u673a\u8d1f\u8d23\u4e0e\u4e0b\u4f4d\u673a\u4ee5\u53ca\u5176\u4ed6\u76f8\u5173\u7cfb\u7edf\uff08\u5982\u6570\u636e\u5e93\u3001ERP\u7cfb\u7edf\u7b49\uff09\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u786e\u4fdd\u6570\u636e\u7684\u51c6\u786e\u4f20\u8f93\u548c\u7cfb\u7edf\u4e4b\u95f4\u7684\u534f\u540c\u5de5\u4f5c\u3002 Info \u4e0a\u4f4d\u673a\u53ef\u4ee5\u662f\u4e00\u53f0\u5de5\u4e1a\u8ba1\u7b97\u673a\u3001PC\u3001\u670d\u52a1\u5668\u751a\u81f3\u5d4c\u5165\u5f0f\u8bbe\u5907\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u6240\u9700\u7684\u529f\u80fd\u548c\u6027\u80fd\u3002\u4e0a\u4f4d\u673a\u8f6f\u4ef6\u53ef\u4ee5\u4f7f\u7528\u5404\u79cd\u7f16\u7a0b\u8bed\u8a00\uff08\u5982C/C++\u3001Python\u3001Java\u7b49\uff09\u548c\u5f00\u53d1\u5de5\u5177\uff08\u5982LabVIEW\u3001WinCC\u3001Ignition\u7b49\uff09\u8fdb\u884c\u5f00\u53d1\u3002 \u57fa\u7840\u7c7b classDiagram class \u5de5\u5382\u8bbe\u5907\u76d1\u7ba1\u7cfb\u7edf{ - \u5de5\u5382\u540d\u79f0 - \u4f4d\u7f6e - \u751f\u4ea7\u7ebf\uff08\u591a\u6761\uff09 } class \u751f\u4ea7\u7ebf{ - \u751f\u4ea7\u7ebf\u7f16\u53f7 - \u4ea7\u54c1\u7c7b\u578b - \u8bbe\u5907\u5217\u8868 - \u4f20\u611f\u5668\u5217\u8868 + \u6570\u636e\u91c7\u96c6\u65b9\u6cd5() + \u6570\u636e\u5904\u7406\u3001\u5b58\u50a8\u3001\u5206\u6790\u65b9\u6cd5() + \u62a5\u8b66\u65b9\u6cd5() } class \u8bbe\u5907{ - \u540d\u79f0 - \u7c7b\u578b - \u72b6\u6001 - \u64cd\u4f5c - \u6240\u5728\u4ea7\u7ebf\u4f4d\u7f6e } class \u4f20\u611f\u5668{ - \u7c7b\u578b\uff08\u6e29\u5ea6\u4f20\u611f\u5668\u3001\u538b\u529b\u4f20\u611f\u5668\u7b49\uff09 - \u72b6\u6001 - \u8bfb\u6570 - \u6240\u5728\u4ea7\u7ebf\u4f4d\u7f6e } \u5de5\u5382\u8bbe\u5907\u76d1\u7ba1\u7cfb\u7edf--|> \u751f\u4ea7\u7ebf: \u5305\u542b \u751f\u4ea7\u7ebf --|> \u4f20\u611f\u5668: \u5305\u542b \u751f\u4ea7\u7ebf --|> \u8bbe\u5907: \u5305\u542b class User{ - \u59d3\u540d - \u804c\u4f4d - \u6743\u9650 } class \u65e5\u5fd7{ - \u65e5\u5fd7\u7c7b\u578b - \u65e5\u5fd7\u65f6\u95f4 - \u64cd\u4f5c\u4eba\u5458 + \u8bb0\u5f55\u7cfb\u7edf\u64cd\u4f5c\u548c\u4e8b\u4ef6() + \u65e5\u5fd7\u5904\u7406\u65b9\u6cd5() } class \u901a\u8baf{ - \u7cfb\u7edf\u901a\u4fe1 + \u8fde\u63a5\u6570\u636e\u5e93\u65b9\u6cd5() + \u65ad\u5f00\u8fde\u63a5\u65b9\u6cd5() + \u53d1\u9001\u6570\u636e\u65b9\u6cd5() + \u63a5\u6536\u6570\u636e\u65b9\u6cd5() } \u7cfb\u7edf\u6846\u67b6 C4Context Container_Boundary(enterprise, \"\u5de5\u5382\u8bbe\u5907\u76d1\u7ba1\u7cfb\u7edf\") { Person(users, \"\u64cd\u4f5c\u5458\\\u7ba1\u7406\u8005\", \"\u751f\u4ea7\u7ebf\u4e0a\u7684\u64cd\u4f5c\u8005\") SystemDb(db, \"\u6570\u636e\u5e93\", \"\u5b58\u50a8\u8bbe\u5907\u6570\u636e, \u4f20\u611f\u5668\u6570\u636e, \u64cd\u4f5c\u65e5\u5fd7, \u6307\u4ee4\u96c6\u5408\u5e76\u8bb0\u5f55\u7cfb\u7edf\u4e8b\u4ef6\u65e5\u5fd7\") SystemDb(instructions, \"\u6307\u4ee4\u96c6\u5408\", \"\u4e0d\u540c\u7c7b\u578b\u7684\u8bbe\u5907\u6307\u4ee4\u96c6\u5408\u4ee5\u53ca\u7cfb\u7edf\u6307\u4ee4\u96c6\u5408\") Container_Boundary(line1, \"\u751f\u4ea7\u7ebf 1\", \"\u751f\u4ea7\u7ebf 1\") { Container(sensors1, \"\u4f20\u611f\u5668\u5217\u88681\") Container(equipments1, \"\u8bbe\u5907\u5217\u88681\") } Container_Boundary(line2, \"\u751f\u4ea7\u7ebf 2\") { Container(sensors2, \"\u4f20\u611f\u5668\u5217\u88682\") Container(equipments2, \"\u8bbe\u5907\u5217\u88682\") } Container_Boundary(line3, \"\u751f\u4ea7\u7ebf 3\") { Container(sensors3, \"\u4f20\u611f\u5668\u5217\u88683\") Container(equipments3, \"\u8bbe\u5907\u5217\u88683\") } Container_Boundary(line4, \"\u751f\u4ea7\u7ebf k\") { Container(added, \"...\") } }","title":"\u57fa\u4e8estreamlit\u7684\u5de5\u5382\u8bbe\u5907\u76d1\u7ba1\u7cfb\u7edf"},{"location":"blogs/FactorViewer/#_1","text":"","title":"\u57fa\u7840\u56fe\u7eb8"},{"location":"blogs/FactorViewer/#_2","text":"\u4e0a\u4f4d\u673a\uff08Host Computer, Master or Supervisor\uff09\u662f\u4e00\u4e2a\u901a\u5e38\u7528\u4e8e\u76d1\u63a7\u548c\u63a7\u5236\u751f\u4ea7\u7ebf\u3001\u5de5\u5382\u8bbe\u5907\u6216\u5de5\u4e1a\u81ea\u52a8\u5316\u7cfb\u7edf\u7684\u8ba1\u7b97\u673a\u3002\u4e0a\u4f4d\u673a\u4e0e\u4e0b\u4f4d\u673a\uff08\u88ab\u63a7\u5236\u8bbe\u5907\uff0c\u5982\u751f\u4ea7\u7ebf\u4e0a\u7684\u8bbe\u5907\u3001\u673a\u5668\u4eba\u7b49\uff09\u76f8\u4e92\u914d\u5408\uff0c\u901a\u8fc7\u901a\u4fe1\u534f\u8bae\uff08\u5982Modbus\u3001CAN\u3001\u4ee5\u592a\u7f51\u7b49\uff09\u8fdb\u884c\u6570\u636e\u4ea4\u6362\u548c\u6307\u4ee4\u4f20\u8f93\u3002 \u4e0a\u4f4d\u673a\u7684\u4e3b\u8981\u804c\u8d23\u5305\u62ec\uff1a \u76d1\u63a7\u548c\u63a7\u5236\uff1a\u4e0a\u4f4d\u673a\u53ef\u4ee5\u5b9e\u65f6\u76d1\u63a7\u4e0b\u4f4d\u673a\u7684\u72b6\u6001\u548c\u6570\u636e\uff0c\u5e76\u5bf9\u5176\u53d1\u9001\u63a7\u5236\u547d\u4ee4\uff0c\u5982\u542f\u52a8\u3001\u505c\u6b62\u3001\u8c03\u6574\u53c2\u6570\u7b49\u3002 \u6570\u636e\u91c7\u96c6\u4e0e\u5904\u7406\uff1a\u4e0a\u4f4d\u673a\u53ef\u4ee5\u6536\u96c6\u4e0b\u4f4d\u673a\u7684\u6570\u636e\uff0c\u5982\u4f20\u611f\u5668\u8bfb\u6570\u3001\u8bbe\u5907\u72b6\u6001\u7b49\uff0c\u5e76\u5bf9\u8fd9\u4e9b\u6570\u636e\u8fdb\u884c\u5904\u7406\u3001\u5206\u6790\u548c\u5b58\u50a8\u3002 \u6545\u969c\u8bca\u65ad\u4e0e\u62a5\u8b66\uff1a\u4e0a\u4f4d\u673a\u53ef\u4ee5\u5bf9\u4e0b\u4f4d\u673a\u53d1\u51fa\u7684\u6545\u969c\u6216\u5f02\u5e38\u4fe1\u53f7\u8fdb\u884c\u8bca\u65ad\uff0c\u5e76\u91c7\u53d6\u76f8\u5e94\u63aa\u65bd\uff0c\u5982\u53d1\u51fa\u62a5\u8b66\u3001\u505c\u6b62\u8bbe\u5907\u7b49\u3002 \u4eba\u673a\u754c\u9762\uff08HMI\uff09\uff1a\u4e0a\u4f4d\u673a\u901a\u5e38\u63d0\u4f9b\u4e00\u79cd\u4eba\u673a\u754c\u9762\uff0c\u4ee5\u4fbf\u64cd\u4f5c\u5458\u548c\u7ba1\u7406\u5458\u76d1\u63a7\u7cfb\u7edf\u72b6\u6001\u3001\u63a7\u5236\u8bbe\u5907\u3001\u67e5\u770b\u6570\u636e\u62a5\u8868\u7b49\u3002 \u901a\u4fe1\uff1a\u4e0a\u4f4d\u673a\u8d1f\u8d23\u4e0e\u4e0b\u4f4d\u673a\u4ee5\u53ca\u5176\u4ed6\u76f8\u5173\u7cfb\u7edf\uff08\u5982\u6570\u636e\u5e93\u3001ERP\u7cfb\u7edf\u7b49\uff09\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u786e\u4fdd\u6570\u636e\u7684\u51c6\u786e\u4f20\u8f93\u548c\u7cfb\u7edf\u4e4b\u95f4\u7684\u534f\u540c\u5de5\u4f5c\u3002 Info \u4e0a\u4f4d\u673a\u53ef\u4ee5\u662f\u4e00\u53f0\u5de5\u4e1a\u8ba1\u7b97\u673a\u3001PC\u3001\u670d\u52a1\u5668\u751a\u81f3\u5d4c\u5165\u5f0f\u8bbe\u5907\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u6240\u9700\u7684\u529f\u80fd\u548c\u6027\u80fd\u3002\u4e0a\u4f4d\u673a\u8f6f\u4ef6\u53ef\u4ee5\u4f7f\u7528\u5404\u79cd\u7f16\u7a0b\u8bed\u8a00\uff08\u5982C/C++\u3001Python\u3001Java\u7b49\uff09\u548c\u5f00\u53d1\u5de5\u5177\uff08\u5982LabVIEW\u3001WinCC\u3001Ignition\u7b49\uff09\u8fdb\u884c\u5f00\u53d1\u3002","title":"\u6982\u5ff5"},{"location":"blogs/FactorViewer/#_3","text":"classDiagram class \u5de5\u5382\u8bbe\u5907\u76d1\u7ba1\u7cfb\u7edf{ - \u5de5\u5382\u540d\u79f0 - \u4f4d\u7f6e - \u751f\u4ea7\u7ebf\uff08\u591a\u6761\uff09 } class \u751f\u4ea7\u7ebf{ - \u751f\u4ea7\u7ebf\u7f16\u53f7 - \u4ea7\u54c1\u7c7b\u578b - \u8bbe\u5907\u5217\u8868 - \u4f20\u611f\u5668\u5217\u8868 + \u6570\u636e\u91c7\u96c6\u65b9\u6cd5() + \u6570\u636e\u5904\u7406\u3001\u5b58\u50a8\u3001\u5206\u6790\u65b9\u6cd5() + \u62a5\u8b66\u65b9\u6cd5() } class \u8bbe\u5907{ - \u540d\u79f0 - \u7c7b\u578b - \u72b6\u6001 - \u64cd\u4f5c - \u6240\u5728\u4ea7\u7ebf\u4f4d\u7f6e } class \u4f20\u611f\u5668{ - \u7c7b\u578b\uff08\u6e29\u5ea6\u4f20\u611f\u5668\u3001\u538b\u529b\u4f20\u611f\u5668\u7b49\uff09 - \u72b6\u6001 - \u8bfb\u6570 - \u6240\u5728\u4ea7\u7ebf\u4f4d\u7f6e } \u5de5\u5382\u8bbe\u5907\u76d1\u7ba1\u7cfb\u7edf--|> \u751f\u4ea7\u7ebf: \u5305\u542b \u751f\u4ea7\u7ebf --|> \u4f20\u611f\u5668: \u5305\u542b \u751f\u4ea7\u7ebf --|> \u8bbe\u5907: \u5305\u542b class User{ - \u59d3\u540d - \u804c\u4f4d - \u6743\u9650 } class \u65e5\u5fd7{ - \u65e5\u5fd7\u7c7b\u578b - \u65e5\u5fd7\u65f6\u95f4 - \u64cd\u4f5c\u4eba\u5458 + \u8bb0\u5f55\u7cfb\u7edf\u64cd\u4f5c\u548c\u4e8b\u4ef6() + \u65e5\u5fd7\u5904\u7406\u65b9\u6cd5() } class \u901a\u8baf{ - \u7cfb\u7edf\u901a\u4fe1 + \u8fde\u63a5\u6570\u636e\u5e93\u65b9\u6cd5() + \u65ad\u5f00\u8fde\u63a5\u65b9\u6cd5() + \u53d1\u9001\u6570\u636e\u65b9\u6cd5() + \u63a5\u6536\u6570\u636e\u65b9\u6cd5() }","title":"\u57fa\u7840\u7c7b"},{"location":"blogs/FactorViewer/#_4","text":"C4Context Container_Boundary(enterprise, \"\u5de5\u5382\u8bbe\u5907\u76d1\u7ba1\u7cfb\u7edf\") { Person(users, \"\u64cd\u4f5c\u5458\\\u7ba1\u7406\u8005\", \"\u751f\u4ea7\u7ebf\u4e0a\u7684\u64cd\u4f5c\u8005\") SystemDb(db, \"\u6570\u636e\u5e93\", \"\u5b58\u50a8\u8bbe\u5907\u6570\u636e, \u4f20\u611f\u5668\u6570\u636e, \u64cd\u4f5c\u65e5\u5fd7, \u6307\u4ee4\u96c6\u5408\u5e76\u8bb0\u5f55\u7cfb\u7edf\u4e8b\u4ef6\u65e5\u5fd7\") SystemDb(instructions, \"\u6307\u4ee4\u96c6\u5408\", \"\u4e0d\u540c\u7c7b\u578b\u7684\u8bbe\u5907\u6307\u4ee4\u96c6\u5408\u4ee5\u53ca\u7cfb\u7edf\u6307\u4ee4\u96c6\u5408\") Container_Boundary(line1, \"\u751f\u4ea7\u7ebf 1\", \"\u751f\u4ea7\u7ebf 1\") { Container(sensors1, \"\u4f20\u611f\u5668\u5217\u88681\") Container(equipments1, \"\u8bbe\u5907\u5217\u88681\") } Container_Boundary(line2, \"\u751f\u4ea7\u7ebf 2\") { Container(sensors2, \"\u4f20\u611f\u5668\u5217\u88682\") Container(equipments2, \"\u8bbe\u5907\u5217\u88682\") } Container_Boundary(line3, \"\u751f\u4ea7\u7ebf 3\") { Container(sensors3, \"\u4f20\u611f\u5668\u5217\u88683\") Container(equipments3, \"\u8bbe\u5907\u5217\u88683\") } Container_Boundary(line4, \"\u751f\u4ea7\u7ebf k\") { Container(added, \"...\") } }","title":"\u7cfb\u7edf\u6846\u67b6"},{"location":"blogs/PaddlePaddle/","text":"\u6700\u8fd1\u767e\u5ea6\u7684LLM\u6587\u5fc3\u4e00\u8a00\u7684\u8868\u73b0\u88ab\u8bb8\u591a\u7f51\u53cb\u5632\u7b11\uff0c\u4f46\u4e0a\u4e2a\u6708\u5165\u95e8PaddlePaddle\u4ee5\u6765\uff0c\u6211\u5bf9\u767e\u5ea6\u662f\u7531\u9ed1\u8f6c\u7c89\u3002Paddle\u4f5c\u4e3a\u6bd4PyTorch\u66f4\u65e9\u5f00\u6e90\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u5f88\u591a\u56fd\u5185\u7684\u540c\u5b66\u5bf9\u5b83\u7684\u6620\u50cf\u5e76\u4e0d\u6df1\u6216\u8005\u5e76\u4e0d\u597d\u3002\u51fa\u4e8e\u5e0c\u671b\u5bf9\u5f00\u6e90\u6846\u67b6\u63a8\u5e7f\u7684\u539f\u56e0\uff0c\u767e\u5ea6\u7684AI Studio\u76ee\u524d\u53ea\u9700\u8981\u5b8c\u6210\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u7684\u4e24\u4e2a\u5206\u7c7b\u4efb\u52a1\u5176\u4e2d\u4e4b\u4e00(\u6ce8\u518c AI Studio \u5e76\u5728 AI\u5b66\u4e60\u5730\u56fe \u754c\u9762\u9009\u62e9\u4e8c\u8005\u4e4b\u4e00\u5373\u53ef\u5f00\u542f\u4efb\u52a1)\uff1a \u65b0\u6d6a\u65b0\u95fb\u6587\u672c\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b\u4f53\u9a8c\u8d5b \u5373\u53ef\u4ee5\u83b7\u5f97100\u5c0f\u65f6\u768432G V100 \u7684GPU\u4f7f\u7528\u65f6\u957f\uff0c\u540c\u65f6\u6bcf\u5468\u8fd8\u67094\u5c0f\u65f6\u76844\u5757V100\uff08128G\uff09\u663e\u5b58\u7684\u4f7f\u7528\u65f6\u957f\uff0c\u6bcf\u5929\u767b\u5f55\u8fd0\u884c\u5373\u900112\u5c0f\u65f6\u7684V100\uff0816G\uff09\u7684\u4f7f\u7528\u65f6\u957f\u3002\u767e\u5ea6\u5e76\u4e0d\u662f\u4ece\u4eca\u5e74\u5f00\u59cb\u8fd9\u6837\u5e72\uff0c\u800c\u662f\u4ece\u5f88\u4e45\u4ee5\u524d\u5c31\u5f00\u59cb\u8fd9\u6837\u9001\u4e86\uff0cAI Studio\u548c\u76ee\u524d\u8bb8\u591a\u81f4\u529b\u4e8e\u628a\u663e\u5361\u7684\u79df\u7528\u4ef7\u683c\u7092\u9ad8\u7684\u4e91\u8ba1\u7b97\u5e73\u53f0\u4e0d\u540c\uff0c\u8fd9\u4e2a\u5e73\u53f0\u751a\u81f3 \u4e0d\u80fd\u5145\u94b1 \u3002Paddle\u65f6\u5e38\u88ab\u8bdf\u75c5\u975e\u5e38\u7684\u50cfTorch\uff0c\u4e00\u90e8\u5206API\u7684\u4f7f\u7528\u662f\u5341\u5206\u50cf\u7684\uff0c\u5176\u5b9e\u6211\u89c9\u5f97\u5bf9\u4e8e\u5e7f\u5927\u7f3a\u7b97\u529b\u7684\u7855\u58eb\u548c\u672c\u79d1\u751f\u8fd9\u751a\u81f3\u662f\u798f\u97f3\uff0c\u56e0\u4e3a\u539f\u5219\u4e0a\u4f60\u53ef\u4ee5\u7528Paddle\u63d0\u4f9b\u7684\u7b97\u529b\u548c\u6570\u636e\u96c6\u8d44\u6e90\u719f\u6089Numpy\uff0cPandas\u8fd9\u4e9b\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u5de5\u7a0b\u5e08\u5fc5\u5907\u7684Python\u5e93\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u719f\u6089Paddle\u6765\u719f\u6089Torch\uff0cAI Studio\u53ef\u4ee5\u4e3a\u8d44\u91d1\u5e76\u4e0d\u5bcc\u88d5\u7684\u540c\u5b66\u63d0\u4f9b\u5b9d\u8d35\u7684\u7b97\u529b\uff0c\u7279\u522b\u662f\u5728LLM\u9010\u6e10\u5360\u636e\u6211\u4eec\u7684\u89c6\u91ce\u7684\u4eca\u5929\uff0c\u6709\u4e00\u4e2a\u56fd\u4ea7\u7684\u6846\u67b6\u53ef\u4ee5\u65e0\u507f\u4e3a\u4f60\u63d0\u4f9b128G\u7684\u663e\u5b58\uff0c\u65e0\u8bba\u662f\u5bf9\u505a\u5206\u5e03\u5f0f\u6a21\u578b\u7684\u8bad\u7ec3\u7684\u5b66\u4e60\uff0c\u8fd8\u662f\u73a9\u66f4\u5927\u7684\u6a21\u578b\u8fd9\u90fd\u662f\u5f88\u8bf1\u4eba\u7684\u3002\u76f8\u8f83\u4e4b\u767e\u5ea6\u7f51\u76d8\u8fd9\u79cd\u4e0d\u5145\u94b1\u5c31\u5f3a\u5236\u9650\u5236\u7f51\u901f\u7684\u4ea7\u54c1\uff0c\u7b80\u76f4\u4e0d\u50cf\u662f\u540c\u4e00\u5bb6\u516c\u53f8\u3002 \u4efb\u52a1\u80cc\u666f\u4ecb\u7ecd \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b\u548c\u732b\u5341\u4e8c\u5206\u7c7b\u662fNLP\u548cCV\u7684\u5178\u578b\u5206\u7c7b\u4efb\u52a1\uff0c\u975e\u5e38\u9002\u5408\u4f5c\u4e3a\u65b0\u624b\u548cPaddlePaddle\u6846\u67b6\u7684\u5165\u95e8\u9879\u76ee\u3002\u524d\u8005\u7684\u76ee\u7684\u662f\u4e3a\u4e00\u4e2a\u4e2d\u6587\u7684\u65b0\u95fb\u6807\u9898\u5728\u653f\u6cbb\u3001\u6559\u80b2\u3001\u8d22\u7ecf...\u7b4914\u4e2a\u7c7b\u522b\u4e0a\u8fdb\u884c\u5206\u7c7b\uff0c\u800c\u732b\u5341\u4e8c\u5206\u7c7b\u9879\u76ee\u5219\u5e0c\u671b\u4e3a\u4e00\u5f20\u56fe\u7247\u4e2d\u7684\u732b\u6253\u4e0a\u5b83\u7684\u5177\u4f53\u6240\u5c5e\u5c0f\u7c7b\u7684\u6807\u7b7e\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u7edf\u4e00\u91c7\u7528\u5bf9\u9884\u8bad\u7ec3\u6a21\u578b\u5728\u5206\u7c7b\u4efb\u52a1\u4e0a\u8fdb\u884c\u5fae\u8c03\u7684\u65b9\u5f0f\u4e3a\u8fd9\u4e24\u4e2a\u4efb\u52a1\u63d0\u4f9bBaseline\uff0c\u5177\u4f53\u7684\u8d5b\u4e8b\u548c\u6570\u636e\u63cf\u8ff0\u89c1\uff1a - \u65b0\u6d6a\u65b0\u95fb\u6587\u672c\u6807\u9898\u5206\u7c7b - \u732b\u5341\u4e8c\u5206\u7c7b\u4f53\u9a8c\u8d5b \u5bfc\u5165\u5e93\u5e76\u9884\u5b9a\u4e49\u4e00\u4e9b\u5e38\u6570 \u9996\u5148\u5bfc\u5165\u4e00\u4e9b\u9700\u8981\u7684\u5305 \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b import os import time import paddle import pandas as pd import numpy as np import paddlenlp import paddle.nn.functional as F from tqdm import tqdm from collections import defaultdict from functools import partial from paddle.io import Dataset , DataLoader from paddlenlp.transformers import BertTokenizer , AutoModelForSequenceClassification , AutoTokenizer , AutoModel from sklearn.model_selection import train_test_split import os import time import paddle import numpy as np from PIL import Image from tqdm import tqdm from paddle.io import Dataset, DataLoader from sklearn.model_selection import train_test_split \u9884\u5148\u5b9a\u4e49\u4e00\u4e9b\u9700\u8981\u7528\u5230\u7684\u5e38\u6570\uff0c \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b EPOCHS = 3 # \u603b\u7684\u8bad\u7ec3\u8f6e\u6b21 LEARNING_RATE = 5e-5 # \u5168\u5c40\u5b66\u4e60\u7387 MODEL_NAME = \"hfl/rbt4\" # \u9884\u8bad\u7ec3\u6a21\u578b\u540d\u79f0 SAVE_PATH = './' + MODEL_NAME . split ( '/' )[ - 1 ] # \u68c0\u67e5\u70b9\u4fdd\u5b58\u5730\u5740 BATCH_SIZE = 1024 # \u6279\u6570\u91cf SAVE_FREQUENCE = 100 # \u4fdd\u5b58\u6b65\u957f LOG_FREQUENCE = 20 # \u8bad\u7ec3\u65e5\u5fd7\u6253\u5370\u6b65\u957f TOTAL_SIZE = 83599 # \u732b\u5341\u4e8c\u9879\u76ee\u6700\u7ec8\u9700\u8981\u7528\u4e8e\u6d4b\u8bd5\u7684\u6570\u636e\u91cf NUM_WORKERS = 4 # \u6570\u636e\u52a0\u8f7d\u5668\u7684\u7ebf\u7a0b\u6570\u91cf TEST_SIZE = 0.20 # \u9a8c\u8bc1\u6570\u636e\u96c6\u4ece\u8bad\u7ec3\u6570\u636e\u4e2d\u5212\u5206\u7684\u6bd4\u4f8b RANDOM_STATE = 1024 # \u968f\u673a\u79cd\u5b50\uff08sklearn.model_selection\u7684train_test_split\u65b9\u6cd5\u4e2d\u4f7f\u7528\uff09 BASE_LINE = 0.90 # \u5f00\u59cb\u4fdd\u5b58\u68c0\u67e5\u70b9\u7684\u9a8c\u8bc1\u96c6Base line MAX_SEQ_LEN = 48 # \u7edf\u8ba1\u9a8c\u8bc1\u6807\u9898\u6570\u636e\u7684\u6700\u957f\u957f\u5ea6\u4e3a48\uff0csequence\u7684\u957f\u5ea6\u4e5f\u53ea\u9700\u8981\u8bbe\u7f6e\u4e3a48\u5373\u53ef EPOCHS = 20 # \u603b\u7684\u8bad\u7ec3\u8f6e\u6b21 LEARNING_RATE = 1e-4 # \u5168\u5c40\u5b66\u4e60\u7387 SAVE_FREQUENCE = 10 # \u4fdd\u5b58\u6b65\u957f BATCH_SIZE = 128 # \u6279\u6570\u91cf LOG_FREQUENCE = 10 # \u8bad\u7ec3\u65e5\u5fd7\u6253\u5370\u6b65\u957f TEST_SIZE = 0.20 # \u9a8c\u8bc1\u6570\u636e\u96c6\u4ece\u8bad\u7ec3\u6570\u636e\u4e2d\u5212\u5206\u7684\u6bd4\u4f8b RANDOM_STATE = 1024 # \u968f\u673a\u79cd\u5b50\uff08sklearn.model_selection\u7684train_test_split\u65b9\u6cd5\u4e2d\u4f7f\u7528\uff09 IMG_SIZE = ( 224 , 224 ) # \u56fe\u50cf\u8f6c\u4e3atensor\u540e\u7684\u540e\u4e24\u7ef4\u5927\u5c0f BASE_LINE = 0.90 # \u5f00\u59cb\u4fdd\u5b58\u68c0\u67e5\u70b9\u7684\u9a8c\u8bc1\u96c6Base line \u6570\u636e\u8bfb\u53d6 \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u8bad\u7ec3\u6570\u636e\u8bfb\u53d6 \u732b\u5341\u4e8c\u8bad\u7ec3\u6570\u636e\u8bfb\u53d6 title_with_labels = [] with open ( './data/Train.txt' , 'r' ) as f : for line in f . readlines (): label , _ , title = line . strip ( ' \\n ' ) . split ( ' \\t ' ) title_with_labels . append (( title , int ( label ))) image_data = [] with open ( './data/cat_12/train_list.txt' , 'r' ) as f : for line in f . readlines (): img_path , label = line . strip ( ' \\n ' ) . split ( ' \\t ' ) image_data . append (( img_path , label )) \u8bad\u7ec3\u548c\u9a8c\u8bc1\u6570\u636e\u7684\u5212\u5206 \u4f7f\u7528 sklearn.model_selection \u4e2d\u7684 train_test_split \u65b9\u6cd5\u5373\u53ef\uff0c\u4e24\u4e2a\u6570\u636e\u96c6\u5747\u91c7\u75280.8/0.2\uff08test_size=0.2\uff09\u7684\u6bd4\u4f8b\u5206\u522b\u4f5c\u4e3a\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u3002 \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u6570\u636e\u96c6\u5212\u5206 \u732b\u5341\u4e8c\u6570\u636e\u96c6\u5212\u5206 train_titles , val_titles = train_test_split ( title_with_labels , test_size = TEST_SIZE , random_state = RANDOM_STATE ) train_imgs , val_imgs = train_test_split ( image_data , test_size = TEST_SIZE , random_state = RANDOM_STATE ) \u6784\u5efa\u6570\u636e\u96c6\u7c7b \u6b64\u5904\u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b\u7684\u6570\u636e\u96c6 TextDataset \u7c7b\u5728\u521d\u59cb\u5316\u65f6\uff0c\u63a5\u6536\u4e00\u4e2a\u7531\u9884\u8bad\u7ec3\u6a21\u578b\u76f8\u5bf9\u5e94\u7684\u5206\u8bcd\u5668tokenizer\uff0c\u8d1f\u8d23\u5c06\u5bf9\u5e94\u7684\u8f93\u5165\u7684\u6807\u9898\u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 tokens \uff0c\u800c\u732b\u5341\u4e8c\u5206\u7c7b\u5668\u4e2d\u5219\u7b80\u5355\u7684\u5b9a\u4e49 image_to_feature_vector \u51fd\u6570\u5f97\u5230\u5bf9\u5e94\u56fe\u50cf\u7684\u7279\u5f81\u3002 \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b class TextDataset ( Dataset ): def __init__ ( self , data , tokenizer , max_seq_length = MAX_SEQ_LEN , isTest = False ): super ( TextDataset , self ) . __init__ () self . data = data self . tokenizer = tokenizer self . max_seq_length = max_seq_length self . isTest = isTest def __getitem__ ( self , index ): if not self . isTest : text , label = self . data [ index ][ 0 ], self . data [ index ][ 1 ] encoded = self . tokenizer . encode ( text , max_seq_len = self . max_seq_length , pad_to_max_seq_len = True ) input_ids , token_type_ids = encoded [ 'input_ids' ], encoded [ 'token_type_ids' ] return tuple ([ np . array ( x , dtype = 'int64' ) for x in [ input_ids , token_type_ids , [ label ]]]) else : title = self . data [ index ] encoded = self . tokenizer . encode ( title , max_seq_len = self . max_seq_length , pad_to_max_seq_len = True ) input_ids , token_type_ids = encoded [ 'input_ids' ], encoded [ 'token_type_ids' ] return tuple ([ np . array ( x , dtype = 'int64' ) for x in [ input_ids , token_type_ids ]]) def __len__ ( self ): return len ( self . data ) # \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u5c06\u56fe\u7247\u8f6c\u6362\u6210\u7279\u5f81 def image_to_feature_vector ( image_path ): # \u6253\u5f00\u56fe\u7247\u5e76\u5c06\u5176\u5927\u5c0f\u91cd\u7f6e\u4e3a IMG_SIZE image = Image . open ( image_path ) . convert ( 'RGB' ) . resize ( IMG_SIZE ) # \u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a NumPy \u6570\u7ec4 image_array = np . array ( image ) mean , std = np . mean ( image_array ), np . std ( image_array ) image_array = ( image_array - mean ) / std return paddle . transpose ( paddle . to_tensor ( image_array , dtype = 'float32' ), [ 2 , 1 , 0 ]) class ImageDataSet ( Dataset ): def __init__ ( self , image_data , isTest = False ): super ( ImageDataSet , self ) . __init__ () self . image_data = image_data self . isTest = isTest def __len__ ( self ): return len ( self . image_data ) def __getitem__ ( self , index ): if not self . isTest : img_path , label = self . image_data [ index ] return image_to_feature_vector ( os . path . join ( './data/cat_12' , img_path )), paddle . to_tensor ([ int ( label )], dtype = 'int64' ) else : img_path = self . image_data [ index ] return image_to_feature_vector ( os . path . join ( './data/cat_12' , img_path )) \u91c7\u7528API\u63a5\u53e3\u83b7\u53d6\u9884\u8bad\u7ec3\u6a21\u578b \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b # \u9700\u8981\u83b7\u53d6\u6a21\u578b\u548c\u5bf9\u5e94\u7684\u5206\u8bcd\u5668\uff0cnum_classes\u53c2\u6570\u5bf9\u5e94\u4e8614\u79cd\u65b0\u95fb\u6807\u9898\u7684\u7c7b\u522b model = AutoModelForSequenceClassification . from_pretrained ( MODEL_NAME , num_classes = 14 ) # \u5c06\u6a21\u578b\u8f6c\u4e3a\u9759\u6001\u56fe\u6a21\u578b\uff0c\u52a0\u5feb\u8bad\u7ec3 model = paddle . jit . to_static ( model ) tokenizer = AutoTokenizer . from_pretrained ( MODEL_NAME ) # \u4f7f\u7528\u9884\u8bad\u7ec3\u8fc7\u540e\u7684resnet50\uff0cnum_classes\u53c2\u6570\u5bf9\u5e9412\u79cd\u732b\u7684\u79cd\u7c7b model = paddle . vision . models . resnet50 ( pretrained = True , num_classes = 12 ) # \u5c06\u6a21\u578b\u8f6c\u4e3a\u9759\u6001\u56fe\u6a21\u578b\uff0c\u52a0\u5feb\u8bad\u7ec3 model = paddle . jit . to_static ( model ) \u6570\u636e\u52a0\u8f7d\u5668 \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b # \u83b7\u5f97\u8bad\u7ec3\u548c\u9a8c\u8bc1\u6570\u636e\u96c6 train_dataset , val_dataset = TextDataset ( data = train_titles , tokenizer = tokenizer ), TextDataset ( data = val_titles , tokenizer = tokenizer ) # \u83b7\u5f97\u91c7\u6837\u5668 train_batch_sampler = BatchSampler ( train_dataset , shuffle = True , batch_size = BATCH_SIZE , ) val_batch_sampler = BatchSampler ( val_dataset , shuffle = True , batch_size = BATCH_SIZE , ) # \u83b7\u5f97\u6570\u636e\u52a0\u8f7d\u5668 train_data_loader = DataLoader ( dataset = train_dataset , batch_sampler = train_batch_sampler , return_list = True , num_workers = NUM_WORKERS ) val_data_loader = DataLoader ( dataset = val_dataset , batch_sampler = val_batch_sampler , return_list = True , num_workers = NUM_WORKERS ) # \u83b7\u5f97\u8bad\u7ec3\u548c\u9a8c\u8bc1\u6570\u636e\u96c6 train_dataset , val_dataset = ImageDataSet ( image_data = train_imgs ), ImageDataSet ( image_data = val_imgs ) # \u83b7\u5f97\u91c7\u6837\u5668 train_batch_sampler = BatchSampler ( train_dataset , shuffle = True , batch_size = BATCH_SIZE , ) val_batch_sampler = BatchSampler ( val_dataset , shuffle = True , batch_size = BATCH_SIZE , ) # \u83b7\u5f97\u6570\u636e\u52a0\u8f7d\u5668 train_data_loader = DataLoader ( dataset = train_dataset , batch_sampler = train_batch_sampler , return_list = True , num_workers = NUM_WORKERS ) val_data_loader = DataLoader ( dataset = val_dataset , batch_sampler = val_batch_sampler , return_list = True , num_workers = NUM_WORKERS ) \u5b9a\u4e49\u8bc4\u4f30\u51fd\u6570 \u5728\u8bad\u7ec3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u4e00\u4e2a\u8bc4\u4f30\u51fd\u6570\u7528\u5728\u9a8c\u8bc1\u6570\u636e\u96c6\u4e0a\uff0c\u7528\u4e8e\u5e2e\u52a9\u6211\u4eec\u5224\u65ad\u6a21\u578b\u7684\u8bad\u7ec3\u60c5\u51b5\uff0c\u8fd9\u91cc\u5747\u5b9a\u4e49 evaluate() \uff0c\u8ba1\u7b97\u5e76\u8fd4\u56de\u4e24\u4e2a\u5206\u7c7b\u4efb\u52a1\u5728\u5404\u81ea\u7684\u9a8c\u8bc1\u96c6\u4e0a\u7684\u6574\u4f53Acc\u5e76\u8fd4\u56de\uff0c\u4e24\u4e2a evaluate \u51fd\u6570\u4e5f\u4ec5\u6709batch\u4e2d\u7684\u53c2\u6570\u5904\u7406\u6709\u7ec6\u5fae\u4e0d\u540c: \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b def evaluate ( model , criterion , metric , data_loader ): model . eval () metric . reset () losses = [] for batch in tqdm ( data_loader ): input_ids , token_type_ids , labels = batch logits = model ( input_ids , token_type_ids ) loss = criterion ( logits , labels ) losses . append ( loss . numpy ()) correct = metric . compute ( logits , labels ) metric . update ( correct ) accu = metric . accumulate () print ( \"eval loss: %.5f , accu: %.7f \" % ( np . mean ( losses ), accu )) model . train () metric . reset () return accu def evaluate ( model , criterion , metric , data_loader ): model . eval () metric . reset () losses = [] for batch in tqdm ( data_loader ): input_ids , labels = batch logits = model ( input_ids ) loss = criterion ( logits , labels ) losses . append ( loss . numpy ()) correct = metric . compute ( logits , labels ) metric . update ( correct ) accu = metric . accumulate () print ( \"eval loss: %.5f , accu: %.7f \" % ( np . mean ( losses ), accu )) model . train () metric . reset () return accu \u8bad\u7ec3\u8fc7\u7a0b \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b # \u5b9a\u4e49\u4f18\u5316\u5668\u3001\u635f\u5931\u51fd\u6570\u548cAcc\u8ba1\u7b97\u5668 optimizer = paddle . optimizer . Adam ( learning_rate = LEARNING_RATE , parameters = model . parameters (), ) criterion = paddle . nn . loss . CrossEntropyLoss () metric = paddle . metric . Accuracy () # \u8c03\u6574\u81f3\u8bad\u7ec3\u6a21\u5f0f model . train () best_acc = BASE_LINE # \u6a21\u578b\u5f00\u59cb\u4fdd\u5b58\u7684BaseLine for epoch in range ( EPOCHS ): print ( f \"epoch: { epoch + 1 } , { time . ctime () } \" ) start_t = time . time () metric . reset () for ind , item in enumerate ( train_data_loader ()): if ind and ( not ind % SAVE_FREQUENCE ): accu = evaluate ( model , criterion , metric , val_data_loader ) if accu > best_acc : best_acc = accu print ( ' \\t Best Acc: {:.6f} ' . format ( accu )) model . save_pretrained ( SAVE_PATH ) tokenizer . save_pretrained ( SAVE_PATH ) input_ids , token_type_ids , labels = item logits = model ( input_ids , token_type_ids ) print ( logits , labels ) loss = criterion ( logits , labels ) probs = F . softmax ( logits , axis = 1 ) correct = metric . compute ( probs , labels ) batch_acc = metric . update ( correct ) acc = metric . accumulate () loss . backward () ave_t = ( time . time () - start_t ) / ( ind + 1 ) extra_h = ave_t * ( len ( train_data_loader ) - ind + 1 ) / 3600 if ind and ( not ind % LOG_FREQUENCE ): print ( f ' \\t step: { ind } / { len ( train_data_loader ) } ,' , 'average time: {:.4f} ,' . format ( ave_t ), 'loss: {:.6f} ' . format ( loss . numpy ()[ 0 ]), 'Batch Acc: {:.9f} , Acc: {:.9f} ' . format ( batch_acc , acc )) optimizer . step () optimizer . clear_grad () optimizer = paddle . optimizer . Adam ( learning_rate = LEARNING_RATE , parameters = model . parameters (), ) criterion = paddle . nn . loss . CrossEntropyLoss () metric = paddle . metric . Accuracy () # \u8c03\u6574\u81f3\u8bad\u7ec3\u6a21\u5f0f model . train () best_acc = BASE_LINE # \u6a21\u578b\u5f00\u59cb\u4fdd\u5b58\u7684BaseLine for epoch in range ( EPOCHS ): print ( f \"epoch: { epoch + 1 } , { time . ctime () } \" ) start_t = time . time () metric . reset () for ind , item in enumerate ( train_dataloader ): if ind and ( not ind % SAVE_FREQUENCE ): accu = evaluate ( model , criterion , metric , val_dataloader ) if accu > best_acc : best_acc = accu print ( ' \\t Best Acc: {:.6f} ' . format ( accu )) input_ids , labels = item logits = model ( input_ids ) loss = criterion ( logits , labels ) probs = F . softmax ( logits , axis = 1 ) correct = metric . compute ( probs , labels ) batch_acc = metric . update ( correct ) acc = metric . accumulate () loss . backward () ave_t = ( time . time () - start_t ) / ( ind + 1 ) extra_h = ave_t * ( len ( train_dataloader ) - ind + 1 ) / 3600 if ind and ( not ind % LOG_FREQUENCE ): print ( f ' \\t step: { ind } / { len ( train_dataloader ) } ,' , 'average time: {:.4f} ,' . format ( ave_t ), 'loss: {:.6f} ' . format ( loss . numpy ()[ 0 ]), 'Batch Acc: {:.9f} , Acc: {:.9f} ' . format ( batch_acc , acc )) optimizer . step () optimizer . clear_grad () \u63a8\u7406\u9884\u6d4b \u6d4b\u8bd5\u6570\u636e\u9884\u5904\u7406 \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b test_title = [] with open ( './data/Test.txt' , 'r' ) as f : for line in f . readlines (): test_title . append ( line . strip ( ' \\n ' )) test_dataset = TextDataset ( data = test_title , tokenizer = tokenizer , isTest = True ) test_batch_sampler = BatchSampler ( test_dataset , shuffle = False , # \u6ce8\u610f\u6b64\u5904\u4e0d\u5e94\u8be5\u5c06\u6d4b\u8bd5\u6570\u636e\u96c6\u6253\u4e71 batch_size = BATCH_SIZE ) test_data_loader = DataLoader ( dataset = test_dataset , batch_sampler = test_batch_sampler , num_workers = 4 ) img_names = os . listdir ( './data/cat_12/cat_12_test' ) test_data = [ os . path . join ( './data/cat_12/cat_12_test' , name ) for name in img_names ] test_dataset = ImageDataSet ( image_data = test_data , isTest = True ) test_batch_sampler = BatchSampler ( test_dataset , shuffle = False , # \u6ce8\u610f\u6b64\u5904\u4e0d\u5e94\u8be5\u5c06\u6d4b\u8bd5\u6570\u636e\u96c6\u6253\u4e71 batch_size = BATCH_SIZE ) test_data_loader = DataLoader ( dataset = test_dataset , batch_sampler = test_batch_sampler , num_workers = 4 ) \u63a8\u7406 \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b model . eval () res = [] for input_ids , token_type_ids in tqdm ( test_data_loader ): logits = model ( input_ids , token_type_ids ) curr_ind = paddle . argmax ( logits , axis = 1 ) res += curr_ind . numpy () . tolist () model . eval () res = [] for img_tensor in tqdm ( test_data_loader ): logits = model ( img_tensor ) curr_ind = paddle . argmax ( logits , axis = 1 ) res += curr_ind . numpy () . tolist () \u8bb0\u5f55\u7ed3\u679c \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b class_lis = [ '\u8d22\u7ecf' , '\u5f69\u7968' , '\u623f\u4ea7' , '\u80a1\u7968' , '\u5bb6\u5c45' , '\u6559\u80b2' , '\u79d1\u6280' , '\u793e\u4f1a' , '\u65f6\u5c1a' , '\u65f6\u653f' , '\u4f53\u80b2' , '\u661f\u5ea7' , '\u6e38\u620f' , '\u5a31\u4e50' ] label_dict = { ind : content for ind , content in enumerate ( class_lis )} assert len ( res ) == TOTAL_SIZE , '\u6700\u7ec8\u8f93\u51fa\u7684list\u957f\u5ea6\u4e0d\u6b63\u786e\uff0c\u9700\u8981\u68c0\u67e5test_data\u662f\u5426\u5408\u7406\u5212\u5206' with open ( './result.txt' , 'w' ) as f : print ( '\u63a8\u7406\u6837\u4f8b\uff1a' ) for i in range ( TOTAL_SIZE ): text = label_dict [ res [ i ]] + ' \\n ' if not i % 100 : print ( ' \\t ' , label_dict [ res [ i ]] + ' \\t ' + test_title [ i ]) f . write ( text ) res_pd = pd . DataFrame ({ 'name' : img_names , 'label' : res }) res_pd . to_csv ( './result.csv' , header = None , index = False ) \u6700\u7ec8\u7ed3\u679c \u5728\u5bf9\u5e94\u7684\u8d5b\u4e8b\u63d0\u4ea4\u5165\u53e3\u63d0\u4ea4\u6700\u7ec8\u7684\u4fdd\u5b58\u7684result.txt\u548cresult.csv\u5373\u53ef\uff0c\u7531\u4e8e\u8fd9\u4e2aDemo\u4e2d\u7684\u4f8b\u5b50\u90fd\u91c7\u7528\u4e86\u76f8\u5bf9\u6bd4\u8f83\u5c0f\u7684\u6a21\u578b\uff0c\u53ef\u4ee5\u628abatch_size\u8bbe\u7f6e\u7684\u5f88\u5927\uff0c\u8bad\u7ec3\u4e5f\u5f88\u5feb\uff0c\u53ef\u4ee5\u5f97\u5230\u76f8\u5bf9\u4e0d\u9519\u7684Base Line\uff0c\u672c\u4eba\u4f7f\u7528 ernie-3.0-base-zh \u548c resnet_50 \u5728\u5bf9\u5e94\u7684\u4efb\u52a1\u4e0b\u5f97\u5230\u7684\u5206\u6570\u5206\u522b\u662f88.2\u5206\uff082020\u5e743\u6708\u6392\u884c\u699c42\u4f4d\uff09\u548c92.5\u5206\uff082023\u5e745\u6708\u6392\u884c\u699c135\u4f4d\uff09\u3002 \u4f60\u4e5f\u53ef\u4ee5\u7b80\u5355\u7684\u901a\u8fc7\u66f4\u6362\u66f4\u5927\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u6765\u8fbe\u5230\u66f4\u597d\u7684\u6548\u679c\uff0c\u5bf9\u4e8e\u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b\u800c\u8a00\uff0c\u53ea\u9700\u8981\u66f4\u6362\u524d\u8ff0\u4ee3\u7801\u4e2d\u7684MODEL_NAME\u5373\u53ef\uff0cPaddlenlp\u63d0\u4f9b\u4e86 \u9884\u8bad\u7ec3\u6a21\u578b\u5e93\u548c\u6a21\u578b\u9002\u5408\u7684\u4efb\u52a1\u7d22\u5f15 \uff0c\u53ea\u8981\u627e\u5230\u9002\u7528\u4e8eSequence Classification\u5747\u53ef\u4f7f\u7528\u3002\u5bf9\u4e8e\u732b\u5341\u4e8c\u5206\u7c7b\uff0c\u5219\u53ef\u4ee5\u5728 paddle.vision.models \u7684 \u5b98\u65b9API \u4e2d\u5bfb\u627e\u60f3\u8981\u5c1d\u8bd5\u7684\u5176\u4ed6\u6a21\u578b\u3002 \u672c\u65b9\u6cd5\u7684\u7f3a\u9677\u662f\uff1a \u53c2\u6570\u7684\u8bbe\u7f6e\u5927\u591a\u662f\u968f\u610f\u7684\uff0c\u6709\u5f88\u5927\u7684\u8c03\u53c2\u7a7a\u95f4\uff1b \u6570\u636e\u7684\u9884\u5904\u7406\u6b65\u9aa4\u8f83\u4e3a\u7b80\u5355\u3002\u5bf9\u4e8e\u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u9879\u76ee\uff0c\u6570\u636e\u7684\u91cf\u662f\u8db3\u591f\u591a\u7684\uff0c\u4f46\u6837\u672c\u53ef\u80fd\u5b58\u5728\u5c0f\u5e45\u5ea6\u7684\u4e0d\u5e73\u8861\uff1b\u5bf9\u4e8e\u732b\u5341\u4e8c\u5206\u7c7b\u9879\u76ee\uff0c\u6570\u636e\u7684\u91cf\u5e76\u4e0d\u5927\uff0c\u53ef\u4ee5\u8003\u8651\u8fdb\u884c\u4e00\u5b9a\u7684\u6570\u636e\u589e\u5f3a\u5bf9\u539f\u6570\u636e\u8fdb\u4e00\u6b65\u7684\u5229\u7528\uff1b \u6a21\u578b\u7684\u8bad\u7ec3\u5e76\u4e0d\u5feb\u3002\u7531\u4e8e\u8bad\u7ec3\u65f6\u91c7\u7528\u4e86\u5355\u7cbe\u5ea6\u7684\u52a8\u8f6c\u9759\u6a21\u578b\u8bad\u7ec3\u65b9\u5f0f\uff0c\u8bad\u7ec3\u7684\u901f\u5ea6\u6bd4\u52a8\u6001\u56fe\u66f4\u5feb\uff0c\u4f46\u63a8\u8350\u91c7\u7528\u5b98\u65b9\u7684API\u6559\u7a0b \u81ea\u52a8\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\uff08AMP) \u4fee\u6539\u5c11\u91cf\u4ee3\u7801\u8f6c\u4e3afp16\u8bad\u7ec3\uff0c\u63a8\u7406\u548c\u8bad\u7ec3\u7684\u901f\u5ea6\u90fd\u4f1a\u5feb\u5f88\u591a\u3002 \u53c2\u8003\u8d44\u6599 \u4e2a\u4eba\u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b\u9879\u76ee\u4e3b\u9875 \u4e2a\u4eba\u732b\u5341\u4e8c\u5206\u7c7b\u9879\u76ee\u4e3b\u9875 \u4e2a\u4eba\u65b0\u6d6a\u65b0\u95fb\u6807\u9898Github\u4e3b\u9875 \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b\u4f18\u79c0\u53c2\u8003\u9879\u76ee \u732b\u5341\u4e8c\u5b98\u65b9\u4f18\u79c0Baseline\u9879\u76ee1 \u732b\u5341\u4e8c\u5b98\u65b9\u4f18\u79c0Baseline\u9879\u76ee2","title":"\u4e24\u4e2a\u5206\u7c7b\u4efb\u52a1\u5feb\u901f\u5165\u95e8PaddlePaddle"},{"location":"blogs/PaddlePaddle/#_1","text":"\u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b\u548c\u732b\u5341\u4e8c\u5206\u7c7b\u662fNLP\u548cCV\u7684\u5178\u578b\u5206\u7c7b\u4efb\u52a1\uff0c\u975e\u5e38\u9002\u5408\u4f5c\u4e3a\u65b0\u624b\u548cPaddlePaddle\u6846\u67b6\u7684\u5165\u95e8\u9879\u76ee\u3002\u524d\u8005\u7684\u76ee\u7684\u662f\u4e3a\u4e00\u4e2a\u4e2d\u6587\u7684\u65b0\u95fb\u6807\u9898\u5728\u653f\u6cbb\u3001\u6559\u80b2\u3001\u8d22\u7ecf...\u7b4914\u4e2a\u7c7b\u522b\u4e0a\u8fdb\u884c\u5206\u7c7b\uff0c\u800c\u732b\u5341\u4e8c\u5206\u7c7b\u9879\u76ee\u5219\u5e0c\u671b\u4e3a\u4e00\u5f20\u56fe\u7247\u4e2d\u7684\u732b\u6253\u4e0a\u5b83\u7684\u5177\u4f53\u6240\u5c5e\u5c0f\u7c7b\u7684\u6807\u7b7e\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u7edf\u4e00\u91c7\u7528\u5bf9\u9884\u8bad\u7ec3\u6a21\u578b\u5728\u5206\u7c7b\u4efb\u52a1\u4e0a\u8fdb\u884c\u5fae\u8c03\u7684\u65b9\u5f0f\u4e3a\u8fd9\u4e24\u4e2a\u4efb\u52a1\u63d0\u4f9bBaseline\uff0c\u5177\u4f53\u7684\u8d5b\u4e8b\u548c\u6570\u636e\u63cf\u8ff0\u89c1\uff1a - \u65b0\u6d6a\u65b0\u95fb\u6587\u672c\u6807\u9898\u5206\u7c7b - \u732b\u5341\u4e8c\u5206\u7c7b\u4f53\u9a8c\u8d5b","title":"\u4efb\u52a1\u80cc\u666f\u4ecb\u7ecd"},{"location":"blogs/PaddlePaddle/#_2","text":"\u9996\u5148\u5bfc\u5165\u4e00\u4e9b\u9700\u8981\u7684\u5305 \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b import os import time import paddle import pandas as pd import numpy as np import paddlenlp import paddle.nn.functional as F from tqdm import tqdm from collections import defaultdict from functools import partial from paddle.io import Dataset , DataLoader from paddlenlp.transformers import BertTokenizer , AutoModelForSequenceClassification , AutoTokenizer , AutoModel from sklearn.model_selection import train_test_split import os import time import paddle import numpy as np from PIL import Image from tqdm import tqdm from paddle.io import Dataset, DataLoader from sklearn.model_selection import train_test_split \u9884\u5148\u5b9a\u4e49\u4e00\u4e9b\u9700\u8981\u7528\u5230\u7684\u5e38\u6570\uff0c \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b EPOCHS = 3 # \u603b\u7684\u8bad\u7ec3\u8f6e\u6b21 LEARNING_RATE = 5e-5 # \u5168\u5c40\u5b66\u4e60\u7387 MODEL_NAME = \"hfl/rbt4\" # \u9884\u8bad\u7ec3\u6a21\u578b\u540d\u79f0 SAVE_PATH = './' + MODEL_NAME . split ( '/' )[ - 1 ] # \u68c0\u67e5\u70b9\u4fdd\u5b58\u5730\u5740 BATCH_SIZE = 1024 # \u6279\u6570\u91cf SAVE_FREQUENCE = 100 # \u4fdd\u5b58\u6b65\u957f LOG_FREQUENCE = 20 # \u8bad\u7ec3\u65e5\u5fd7\u6253\u5370\u6b65\u957f TOTAL_SIZE = 83599 # \u732b\u5341\u4e8c\u9879\u76ee\u6700\u7ec8\u9700\u8981\u7528\u4e8e\u6d4b\u8bd5\u7684\u6570\u636e\u91cf NUM_WORKERS = 4 # \u6570\u636e\u52a0\u8f7d\u5668\u7684\u7ebf\u7a0b\u6570\u91cf TEST_SIZE = 0.20 # \u9a8c\u8bc1\u6570\u636e\u96c6\u4ece\u8bad\u7ec3\u6570\u636e\u4e2d\u5212\u5206\u7684\u6bd4\u4f8b RANDOM_STATE = 1024 # \u968f\u673a\u79cd\u5b50\uff08sklearn.model_selection\u7684train_test_split\u65b9\u6cd5\u4e2d\u4f7f\u7528\uff09 BASE_LINE = 0.90 # \u5f00\u59cb\u4fdd\u5b58\u68c0\u67e5\u70b9\u7684\u9a8c\u8bc1\u96c6Base line MAX_SEQ_LEN = 48 # \u7edf\u8ba1\u9a8c\u8bc1\u6807\u9898\u6570\u636e\u7684\u6700\u957f\u957f\u5ea6\u4e3a48\uff0csequence\u7684\u957f\u5ea6\u4e5f\u53ea\u9700\u8981\u8bbe\u7f6e\u4e3a48\u5373\u53ef EPOCHS = 20 # \u603b\u7684\u8bad\u7ec3\u8f6e\u6b21 LEARNING_RATE = 1e-4 # \u5168\u5c40\u5b66\u4e60\u7387 SAVE_FREQUENCE = 10 # \u4fdd\u5b58\u6b65\u957f BATCH_SIZE = 128 # \u6279\u6570\u91cf LOG_FREQUENCE = 10 # \u8bad\u7ec3\u65e5\u5fd7\u6253\u5370\u6b65\u957f TEST_SIZE = 0.20 # \u9a8c\u8bc1\u6570\u636e\u96c6\u4ece\u8bad\u7ec3\u6570\u636e\u4e2d\u5212\u5206\u7684\u6bd4\u4f8b RANDOM_STATE = 1024 # \u968f\u673a\u79cd\u5b50\uff08sklearn.model_selection\u7684train_test_split\u65b9\u6cd5\u4e2d\u4f7f\u7528\uff09 IMG_SIZE = ( 224 , 224 ) # \u56fe\u50cf\u8f6c\u4e3atensor\u540e\u7684\u540e\u4e24\u7ef4\u5927\u5c0f BASE_LINE = 0.90 # \u5f00\u59cb\u4fdd\u5b58\u68c0\u67e5\u70b9\u7684\u9a8c\u8bc1\u96c6Base line","title":"\u5bfc\u5165\u5e93\u5e76\u9884\u5b9a\u4e49\u4e00\u4e9b\u5e38\u6570"},{"location":"blogs/PaddlePaddle/#_3","text":"\u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u8bad\u7ec3\u6570\u636e\u8bfb\u53d6 \u732b\u5341\u4e8c\u8bad\u7ec3\u6570\u636e\u8bfb\u53d6 title_with_labels = [] with open ( './data/Train.txt' , 'r' ) as f : for line in f . readlines (): label , _ , title = line . strip ( ' \\n ' ) . split ( ' \\t ' ) title_with_labels . append (( title , int ( label ))) image_data = [] with open ( './data/cat_12/train_list.txt' , 'r' ) as f : for line in f . readlines (): img_path , label = line . strip ( ' \\n ' ) . split ( ' \\t ' ) image_data . append (( img_path , label ))","title":"\u6570\u636e\u8bfb\u53d6"},{"location":"blogs/PaddlePaddle/#_4","text":"\u4f7f\u7528 sklearn.model_selection \u4e2d\u7684 train_test_split \u65b9\u6cd5\u5373\u53ef\uff0c\u4e24\u4e2a\u6570\u636e\u96c6\u5747\u91c7\u75280.8/0.2\uff08test_size=0.2\uff09\u7684\u6bd4\u4f8b\u5206\u522b\u4f5c\u4e3a\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u3002 \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u6570\u636e\u96c6\u5212\u5206 \u732b\u5341\u4e8c\u6570\u636e\u96c6\u5212\u5206 train_titles , val_titles = train_test_split ( title_with_labels , test_size = TEST_SIZE , random_state = RANDOM_STATE ) train_imgs , val_imgs = train_test_split ( image_data , test_size = TEST_SIZE , random_state = RANDOM_STATE )","title":"\u8bad\u7ec3\u548c\u9a8c\u8bc1\u6570\u636e\u7684\u5212\u5206"},{"location":"blogs/PaddlePaddle/#_5","text":"\u6b64\u5904\u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b\u7684\u6570\u636e\u96c6 TextDataset \u7c7b\u5728\u521d\u59cb\u5316\u65f6\uff0c\u63a5\u6536\u4e00\u4e2a\u7531\u9884\u8bad\u7ec3\u6a21\u578b\u76f8\u5bf9\u5e94\u7684\u5206\u8bcd\u5668tokenizer\uff0c\u8d1f\u8d23\u5c06\u5bf9\u5e94\u7684\u8f93\u5165\u7684\u6807\u9898\u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 tokens \uff0c\u800c\u732b\u5341\u4e8c\u5206\u7c7b\u5668\u4e2d\u5219\u7b80\u5355\u7684\u5b9a\u4e49 image_to_feature_vector \u51fd\u6570\u5f97\u5230\u5bf9\u5e94\u56fe\u50cf\u7684\u7279\u5f81\u3002 \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b class TextDataset ( Dataset ): def __init__ ( self , data , tokenizer , max_seq_length = MAX_SEQ_LEN , isTest = False ): super ( TextDataset , self ) . __init__ () self . data = data self . tokenizer = tokenizer self . max_seq_length = max_seq_length self . isTest = isTest def __getitem__ ( self , index ): if not self . isTest : text , label = self . data [ index ][ 0 ], self . data [ index ][ 1 ] encoded = self . tokenizer . encode ( text , max_seq_len = self . max_seq_length , pad_to_max_seq_len = True ) input_ids , token_type_ids = encoded [ 'input_ids' ], encoded [ 'token_type_ids' ] return tuple ([ np . array ( x , dtype = 'int64' ) for x in [ input_ids , token_type_ids , [ label ]]]) else : title = self . data [ index ] encoded = self . tokenizer . encode ( title , max_seq_len = self . max_seq_length , pad_to_max_seq_len = True ) input_ids , token_type_ids = encoded [ 'input_ids' ], encoded [ 'token_type_ids' ] return tuple ([ np . array ( x , dtype = 'int64' ) for x in [ input_ids , token_type_ids ]]) def __len__ ( self ): return len ( self . data ) # \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u5c06\u56fe\u7247\u8f6c\u6362\u6210\u7279\u5f81 def image_to_feature_vector ( image_path ): # \u6253\u5f00\u56fe\u7247\u5e76\u5c06\u5176\u5927\u5c0f\u91cd\u7f6e\u4e3a IMG_SIZE image = Image . open ( image_path ) . convert ( 'RGB' ) . resize ( IMG_SIZE ) # \u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a NumPy \u6570\u7ec4 image_array = np . array ( image ) mean , std = np . mean ( image_array ), np . std ( image_array ) image_array = ( image_array - mean ) / std return paddle . transpose ( paddle . to_tensor ( image_array , dtype = 'float32' ), [ 2 , 1 , 0 ]) class ImageDataSet ( Dataset ): def __init__ ( self , image_data , isTest = False ): super ( ImageDataSet , self ) . __init__ () self . image_data = image_data self . isTest = isTest def __len__ ( self ): return len ( self . image_data ) def __getitem__ ( self , index ): if not self . isTest : img_path , label = self . image_data [ index ] return image_to_feature_vector ( os . path . join ( './data/cat_12' , img_path )), paddle . to_tensor ([ int ( label )], dtype = 'int64' ) else : img_path = self . image_data [ index ] return image_to_feature_vector ( os . path . join ( './data/cat_12' , img_path ))","title":"\u6784\u5efa\u6570\u636e\u96c6\u7c7b"},{"location":"blogs/PaddlePaddle/#api","text":"\u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b # \u9700\u8981\u83b7\u53d6\u6a21\u578b\u548c\u5bf9\u5e94\u7684\u5206\u8bcd\u5668\uff0cnum_classes\u53c2\u6570\u5bf9\u5e94\u4e8614\u79cd\u65b0\u95fb\u6807\u9898\u7684\u7c7b\u522b model = AutoModelForSequenceClassification . from_pretrained ( MODEL_NAME , num_classes = 14 ) # \u5c06\u6a21\u578b\u8f6c\u4e3a\u9759\u6001\u56fe\u6a21\u578b\uff0c\u52a0\u5feb\u8bad\u7ec3 model = paddle . jit . to_static ( model ) tokenizer = AutoTokenizer . from_pretrained ( MODEL_NAME ) # \u4f7f\u7528\u9884\u8bad\u7ec3\u8fc7\u540e\u7684resnet50\uff0cnum_classes\u53c2\u6570\u5bf9\u5e9412\u79cd\u732b\u7684\u79cd\u7c7b model = paddle . vision . models . resnet50 ( pretrained = True , num_classes = 12 ) # \u5c06\u6a21\u578b\u8f6c\u4e3a\u9759\u6001\u56fe\u6a21\u578b\uff0c\u52a0\u5feb\u8bad\u7ec3 model = paddle . jit . to_static ( model )","title":"\u91c7\u7528API\u63a5\u53e3\u83b7\u53d6\u9884\u8bad\u7ec3\u6a21\u578b"},{"location":"blogs/PaddlePaddle/#_6","text":"\u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b # \u83b7\u5f97\u8bad\u7ec3\u548c\u9a8c\u8bc1\u6570\u636e\u96c6 train_dataset , val_dataset = TextDataset ( data = train_titles , tokenizer = tokenizer ), TextDataset ( data = val_titles , tokenizer = tokenizer ) # \u83b7\u5f97\u91c7\u6837\u5668 train_batch_sampler = BatchSampler ( train_dataset , shuffle = True , batch_size = BATCH_SIZE , ) val_batch_sampler = BatchSampler ( val_dataset , shuffle = True , batch_size = BATCH_SIZE , ) # \u83b7\u5f97\u6570\u636e\u52a0\u8f7d\u5668 train_data_loader = DataLoader ( dataset = train_dataset , batch_sampler = train_batch_sampler , return_list = True , num_workers = NUM_WORKERS ) val_data_loader = DataLoader ( dataset = val_dataset , batch_sampler = val_batch_sampler , return_list = True , num_workers = NUM_WORKERS ) # \u83b7\u5f97\u8bad\u7ec3\u548c\u9a8c\u8bc1\u6570\u636e\u96c6 train_dataset , val_dataset = ImageDataSet ( image_data = train_imgs ), ImageDataSet ( image_data = val_imgs ) # \u83b7\u5f97\u91c7\u6837\u5668 train_batch_sampler = BatchSampler ( train_dataset , shuffle = True , batch_size = BATCH_SIZE , ) val_batch_sampler = BatchSampler ( val_dataset , shuffle = True , batch_size = BATCH_SIZE , ) # \u83b7\u5f97\u6570\u636e\u52a0\u8f7d\u5668 train_data_loader = DataLoader ( dataset = train_dataset , batch_sampler = train_batch_sampler , return_list = True , num_workers = NUM_WORKERS ) val_data_loader = DataLoader ( dataset = val_dataset , batch_sampler = val_batch_sampler , return_list = True , num_workers = NUM_WORKERS )","title":"\u6570\u636e\u52a0\u8f7d\u5668"},{"location":"blogs/PaddlePaddle/#_7","text":"\u5728\u8bad\u7ec3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u4e00\u4e2a\u8bc4\u4f30\u51fd\u6570\u7528\u5728\u9a8c\u8bc1\u6570\u636e\u96c6\u4e0a\uff0c\u7528\u4e8e\u5e2e\u52a9\u6211\u4eec\u5224\u65ad\u6a21\u578b\u7684\u8bad\u7ec3\u60c5\u51b5\uff0c\u8fd9\u91cc\u5747\u5b9a\u4e49 evaluate() \uff0c\u8ba1\u7b97\u5e76\u8fd4\u56de\u4e24\u4e2a\u5206\u7c7b\u4efb\u52a1\u5728\u5404\u81ea\u7684\u9a8c\u8bc1\u96c6\u4e0a\u7684\u6574\u4f53Acc\u5e76\u8fd4\u56de\uff0c\u4e24\u4e2a evaluate \u51fd\u6570\u4e5f\u4ec5\u6709batch\u4e2d\u7684\u53c2\u6570\u5904\u7406\u6709\u7ec6\u5fae\u4e0d\u540c: \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b def evaluate ( model , criterion , metric , data_loader ): model . eval () metric . reset () losses = [] for batch in tqdm ( data_loader ): input_ids , token_type_ids , labels = batch logits = model ( input_ids , token_type_ids ) loss = criterion ( logits , labels ) losses . append ( loss . numpy ()) correct = metric . compute ( logits , labels ) metric . update ( correct ) accu = metric . accumulate () print ( \"eval loss: %.5f , accu: %.7f \" % ( np . mean ( losses ), accu )) model . train () metric . reset () return accu def evaluate ( model , criterion , metric , data_loader ): model . eval () metric . reset () losses = [] for batch in tqdm ( data_loader ): input_ids , labels = batch logits = model ( input_ids ) loss = criterion ( logits , labels ) losses . append ( loss . numpy ()) correct = metric . compute ( logits , labels ) metric . update ( correct ) accu = metric . accumulate () print ( \"eval loss: %.5f , accu: %.7f \" % ( np . mean ( losses ), accu )) model . train () metric . reset () return accu","title":"\u5b9a\u4e49\u8bc4\u4f30\u51fd\u6570"},{"location":"blogs/PaddlePaddle/#_8","text":"\u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b # \u5b9a\u4e49\u4f18\u5316\u5668\u3001\u635f\u5931\u51fd\u6570\u548cAcc\u8ba1\u7b97\u5668 optimizer = paddle . optimizer . Adam ( learning_rate = LEARNING_RATE , parameters = model . parameters (), ) criterion = paddle . nn . loss . CrossEntropyLoss () metric = paddle . metric . Accuracy () # \u8c03\u6574\u81f3\u8bad\u7ec3\u6a21\u5f0f model . train () best_acc = BASE_LINE # \u6a21\u578b\u5f00\u59cb\u4fdd\u5b58\u7684BaseLine for epoch in range ( EPOCHS ): print ( f \"epoch: { epoch + 1 } , { time . ctime () } \" ) start_t = time . time () metric . reset () for ind , item in enumerate ( train_data_loader ()): if ind and ( not ind % SAVE_FREQUENCE ): accu = evaluate ( model , criterion , metric , val_data_loader ) if accu > best_acc : best_acc = accu print ( ' \\t Best Acc: {:.6f} ' . format ( accu )) model . save_pretrained ( SAVE_PATH ) tokenizer . save_pretrained ( SAVE_PATH ) input_ids , token_type_ids , labels = item logits = model ( input_ids , token_type_ids ) print ( logits , labels ) loss = criterion ( logits , labels ) probs = F . softmax ( logits , axis = 1 ) correct = metric . compute ( probs , labels ) batch_acc = metric . update ( correct ) acc = metric . accumulate () loss . backward () ave_t = ( time . time () - start_t ) / ( ind + 1 ) extra_h = ave_t * ( len ( train_data_loader ) - ind + 1 ) / 3600 if ind and ( not ind % LOG_FREQUENCE ): print ( f ' \\t step: { ind } / { len ( train_data_loader ) } ,' , 'average time: {:.4f} ,' . format ( ave_t ), 'loss: {:.6f} ' . format ( loss . numpy ()[ 0 ]), 'Batch Acc: {:.9f} , Acc: {:.9f} ' . format ( batch_acc , acc )) optimizer . step () optimizer . clear_grad () optimizer = paddle . optimizer . Adam ( learning_rate = LEARNING_RATE , parameters = model . parameters (), ) criterion = paddle . nn . loss . CrossEntropyLoss () metric = paddle . metric . Accuracy () # \u8c03\u6574\u81f3\u8bad\u7ec3\u6a21\u5f0f model . train () best_acc = BASE_LINE # \u6a21\u578b\u5f00\u59cb\u4fdd\u5b58\u7684BaseLine for epoch in range ( EPOCHS ): print ( f \"epoch: { epoch + 1 } , { time . ctime () } \" ) start_t = time . time () metric . reset () for ind , item in enumerate ( train_dataloader ): if ind and ( not ind % SAVE_FREQUENCE ): accu = evaluate ( model , criterion , metric , val_dataloader ) if accu > best_acc : best_acc = accu print ( ' \\t Best Acc: {:.6f} ' . format ( accu )) input_ids , labels = item logits = model ( input_ids ) loss = criterion ( logits , labels ) probs = F . softmax ( logits , axis = 1 ) correct = metric . compute ( probs , labels ) batch_acc = metric . update ( correct ) acc = metric . accumulate () loss . backward () ave_t = ( time . time () - start_t ) / ( ind + 1 ) extra_h = ave_t * ( len ( train_dataloader ) - ind + 1 ) / 3600 if ind and ( not ind % LOG_FREQUENCE ): print ( f ' \\t step: { ind } / { len ( train_dataloader ) } ,' , 'average time: {:.4f} ,' . format ( ave_t ), 'loss: {:.6f} ' . format ( loss . numpy ()[ 0 ]), 'Batch Acc: {:.9f} , Acc: {:.9f} ' . format ( batch_acc , acc )) optimizer . step () optimizer . clear_grad ()","title":"\u8bad\u7ec3\u8fc7\u7a0b"},{"location":"blogs/PaddlePaddle/#_9","text":"","title":"\u63a8\u7406\u9884\u6d4b"},{"location":"blogs/PaddlePaddle/#_10","text":"\u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b test_title = [] with open ( './data/Test.txt' , 'r' ) as f : for line in f . readlines (): test_title . append ( line . strip ( ' \\n ' )) test_dataset = TextDataset ( data = test_title , tokenizer = tokenizer , isTest = True ) test_batch_sampler = BatchSampler ( test_dataset , shuffle = False , # \u6ce8\u610f\u6b64\u5904\u4e0d\u5e94\u8be5\u5c06\u6d4b\u8bd5\u6570\u636e\u96c6\u6253\u4e71 batch_size = BATCH_SIZE ) test_data_loader = DataLoader ( dataset = test_dataset , batch_sampler = test_batch_sampler , num_workers = 4 ) img_names = os . listdir ( './data/cat_12/cat_12_test' ) test_data = [ os . path . join ( './data/cat_12/cat_12_test' , name ) for name in img_names ] test_dataset = ImageDataSet ( image_data = test_data , isTest = True ) test_batch_sampler = BatchSampler ( test_dataset , shuffle = False , # \u6ce8\u610f\u6b64\u5904\u4e0d\u5e94\u8be5\u5c06\u6d4b\u8bd5\u6570\u636e\u96c6\u6253\u4e71 batch_size = BATCH_SIZE ) test_data_loader = DataLoader ( dataset = test_dataset , batch_sampler = test_batch_sampler , num_workers = 4 )","title":"\u6d4b\u8bd5\u6570\u636e\u9884\u5904\u7406"},{"location":"blogs/PaddlePaddle/#_11","text":"\u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b model . eval () res = [] for input_ids , token_type_ids in tqdm ( test_data_loader ): logits = model ( input_ids , token_type_ids ) curr_ind = paddle . argmax ( logits , axis = 1 ) res += curr_ind . numpy () . tolist () model . eval () res = [] for img_tensor in tqdm ( test_data_loader ): logits = model ( img_tensor ) curr_ind = paddle . argmax ( logits , axis = 1 ) res += curr_ind . numpy () . tolist ()","title":"\u63a8\u7406"},{"location":"blogs/PaddlePaddle/#_12","text":"\u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b \u732b\u5341\u4e8c\u5206\u7c7b class_lis = [ '\u8d22\u7ecf' , '\u5f69\u7968' , '\u623f\u4ea7' , '\u80a1\u7968' , '\u5bb6\u5c45' , '\u6559\u80b2' , '\u79d1\u6280' , '\u793e\u4f1a' , '\u65f6\u5c1a' , '\u65f6\u653f' , '\u4f53\u80b2' , '\u661f\u5ea7' , '\u6e38\u620f' , '\u5a31\u4e50' ] label_dict = { ind : content for ind , content in enumerate ( class_lis )} assert len ( res ) == TOTAL_SIZE , '\u6700\u7ec8\u8f93\u51fa\u7684list\u957f\u5ea6\u4e0d\u6b63\u786e\uff0c\u9700\u8981\u68c0\u67e5test_data\u662f\u5426\u5408\u7406\u5212\u5206' with open ( './result.txt' , 'w' ) as f : print ( '\u63a8\u7406\u6837\u4f8b\uff1a' ) for i in range ( TOTAL_SIZE ): text = label_dict [ res [ i ]] + ' \\n ' if not i % 100 : print ( ' \\t ' , label_dict [ res [ i ]] + ' \\t ' + test_title [ i ]) f . write ( text ) res_pd = pd . DataFrame ({ 'name' : img_names , 'label' : res }) res_pd . to_csv ( './result.csv' , header = None , index = False )","title":"\u8bb0\u5f55\u7ed3\u679c"},{"location":"blogs/PaddlePaddle/#_13","text":"\u5728\u5bf9\u5e94\u7684\u8d5b\u4e8b\u63d0\u4ea4\u5165\u53e3\u63d0\u4ea4\u6700\u7ec8\u7684\u4fdd\u5b58\u7684result.txt\u548cresult.csv\u5373\u53ef\uff0c\u7531\u4e8e\u8fd9\u4e2aDemo\u4e2d\u7684\u4f8b\u5b50\u90fd\u91c7\u7528\u4e86\u76f8\u5bf9\u6bd4\u8f83\u5c0f\u7684\u6a21\u578b\uff0c\u53ef\u4ee5\u628abatch_size\u8bbe\u7f6e\u7684\u5f88\u5927\uff0c\u8bad\u7ec3\u4e5f\u5f88\u5feb\uff0c\u53ef\u4ee5\u5f97\u5230\u76f8\u5bf9\u4e0d\u9519\u7684Base Line\uff0c\u672c\u4eba\u4f7f\u7528 ernie-3.0-base-zh \u548c resnet_50 \u5728\u5bf9\u5e94\u7684\u4efb\u52a1\u4e0b\u5f97\u5230\u7684\u5206\u6570\u5206\u522b\u662f88.2\u5206\uff082020\u5e743\u6708\u6392\u884c\u699c42\u4f4d\uff09\u548c92.5\u5206\uff082023\u5e745\u6708\u6392\u884c\u699c135\u4f4d\uff09\u3002 \u4f60\u4e5f\u53ef\u4ee5\u7b80\u5355\u7684\u901a\u8fc7\u66f4\u6362\u66f4\u5927\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u6765\u8fbe\u5230\u66f4\u597d\u7684\u6548\u679c\uff0c\u5bf9\u4e8e\u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b\u800c\u8a00\uff0c\u53ea\u9700\u8981\u66f4\u6362\u524d\u8ff0\u4ee3\u7801\u4e2d\u7684MODEL_NAME\u5373\u53ef\uff0cPaddlenlp\u63d0\u4f9b\u4e86 \u9884\u8bad\u7ec3\u6a21\u578b\u5e93\u548c\u6a21\u578b\u9002\u5408\u7684\u4efb\u52a1\u7d22\u5f15 \uff0c\u53ea\u8981\u627e\u5230\u9002\u7528\u4e8eSequence Classification\u5747\u53ef\u4f7f\u7528\u3002\u5bf9\u4e8e\u732b\u5341\u4e8c\u5206\u7c7b\uff0c\u5219\u53ef\u4ee5\u5728 paddle.vision.models \u7684 \u5b98\u65b9API \u4e2d\u5bfb\u627e\u60f3\u8981\u5c1d\u8bd5\u7684\u5176\u4ed6\u6a21\u578b\u3002 \u672c\u65b9\u6cd5\u7684\u7f3a\u9677\u662f\uff1a \u53c2\u6570\u7684\u8bbe\u7f6e\u5927\u591a\u662f\u968f\u610f\u7684\uff0c\u6709\u5f88\u5927\u7684\u8c03\u53c2\u7a7a\u95f4\uff1b \u6570\u636e\u7684\u9884\u5904\u7406\u6b65\u9aa4\u8f83\u4e3a\u7b80\u5355\u3002\u5bf9\u4e8e\u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u9879\u76ee\uff0c\u6570\u636e\u7684\u91cf\u662f\u8db3\u591f\u591a\u7684\uff0c\u4f46\u6837\u672c\u53ef\u80fd\u5b58\u5728\u5c0f\u5e45\u5ea6\u7684\u4e0d\u5e73\u8861\uff1b\u5bf9\u4e8e\u732b\u5341\u4e8c\u5206\u7c7b\u9879\u76ee\uff0c\u6570\u636e\u7684\u91cf\u5e76\u4e0d\u5927\uff0c\u53ef\u4ee5\u8003\u8651\u8fdb\u884c\u4e00\u5b9a\u7684\u6570\u636e\u589e\u5f3a\u5bf9\u539f\u6570\u636e\u8fdb\u4e00\u6b65\u7684\u5229\u7528\uff1b \u6a21\u578b\u7684\u8bad\u7ec3\u5e76\u4e0d\u5feb\u3002\u7531\u4e8e\u8bad\u7ec3\u65f6\u91c7\u7528\u4e86\u5355\u7cbe\u5ea6\u7684\u52a8\u8f6c\u9759\u6a21\u578b\u8bad\u7ec3\u65b9\u5f0f\uff0c\u8bad\u7ec3\u7684\u901f\u5ea6\u6bd4\u52a8\u6001\u56fe\u66f4\u5feb\uff0c\u4f46\u63a8\u8350\u91c7\u7528\u5b98\u65b9\u7684API\u6559\u7a0b \u81ea\u52a8\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\uff08AMP) \u4fee\u6539\u5c11\u91cf\u4ee3\u7801\u8f6c\u4e3afp16\u8bad\u7ec3\uff0c\u63a8\u7406\u548c\u8bad\u7ec3\u7684\u901f\u5ea6\u90fd\u4f1a\u5feb\u5f88\u591a\u3002","title":"\u6700\u7ec8\u7ed3\u679c"},{"location":"blogs/PaddlePaddle/#_14","text":"\u4e2a\u4eba\u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b\u9879\u76ee\u4e3b\u9875 \u4e2a\u4eba\u732b\u5341\u4e8c\u5206\u7c7b\u9879\u76ee\u4e3b\u9875 \u4e2a\u4eba\u65b0\u6d6a\u65b0\u95fb\u6807\u9898Github\u4e3b\u9875 \u65b0\u6d6a\u65b0\u95fb\u6807\u9898\u5206\u7c7b\u4f18\u79c0\u53c2\u8003\u9879\u76ee \u732b\u5341\u4e8c\u5b98\u65b9\u4f18\u79c0Baseline\u9879\u76ee1 \u732b\u5341\u4e8c\u5b98\u65b9\u4f18\u79c0Baseline\u9879\u76ee2","title":"\u53c2\u8003\u8d44\u6599"},{"location":"blogs/streamlit/","text":"Streamlit \u4ee5Python\u4e3a\u57fa\u7840\u5f00\u53d1\u8bed\u8a00\u7684\u5f00\u53d1\u8005\uff0c\u7279\u522b\u662f\u7b97\u6cd5\u5de5\u7a0b\u5e08\u4eec\u7684\u4e00\u4e2a\u75db\u70b9\u662f \u5f00\u53d1\u5185\u5bb9\u7684\u7f8e\u89c2\u5448\u73b0 \u3002\u6211\u5728\u5199\u4e00\u4e2a\u7a0b\u5e8f\u65f6\u60f3\u5b8c\u6210\u7684\u4e0d\u4ec5\u662f\u7a0b\u5e8f\u7684\u6838\u5fc3\u903b\u8f91\uff0c\u7406\u60f3\u4e2d\u7684\u72b6\u6001\u662f\uff0c\u6211\u80fd\u901a\u8fc7Python\u7b80\u5355\u7684\u51e0\u884c\u4ee3\u7801\uff0c\u5c31\u5c06\u81ea\u5df1\u7684\u7a0b\u5e8f\u5199\u6210\u4e00\u4e2a\u53ef\u4ea4\u4e92\u7684\u7f8e\u89c2\u7684App\u6216\u8005\u7f51\u9875\u3002 Streamlit \u8ba9\u4f60\u53ef\u4ee5\u4e0d\u7528\u5199HTML\uff0cCSS\uff0cJS\uff0c\u5c31\u80fd\u8f7b\u677e\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u6807\uff0c\u5b83\u57fa\u4e8eGithub\u7684\u9879\u76ee\u4ed3\u5e93\u8fdb\u884c\u7248\u672c\u7ba1\u7406\uff0c\u5e76\u4e14\u53ef\u4ee5 \u514d\u8d39\u7684\u8fdb\u884cApp\u90e8\u7f72 \u3002 \u9664\u6b64\u4ee5\u5916\uff0c\u5b83\u6709\u8bf8\u591a\u4f18\u70b9\uff1a \u5f00\u6e90 \u9ad8\u5ea6\u96c6\u6210\u6613\u7528\u7684API\u63a5\u53e3 \u4e30\u5bcc\u7684\u6a21\u7248\u5e93 \u5b89\u88c5\u548c\u5feb\u901f\u4f7f\u7528 \u5b89\u88c5 $ pip install streamit \u5feb\u901f\u4f7f\u7528 Streamlit\u4e2d\uff0c\u4e00\u4e2a\u9875\u9762\u7531\u4e00\u4e2a.py\u811a\u672c\u521b\u5efa\uff0c\u56e0\u6b64\u4f60\u7684\u6587\u4ef6\u6811\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a -- ProjectName -- HomePage.py \u6253\u5f00HomePage.py\uff0c\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u5f00\u59cb\u754c\u9762\uff1a HomePage.py 1 2 import streamlit as st st . title ( \"Hello World\" ) \u7ed3\u675f\u540e\u4fdd\u5b58\uff0c\u7136\u540e\u5728\u547d\u4ee4\u884c\u8fd0\u884c $ streamlit run HomePage.py \u9ed8\u8ba4\u6d4f\u89c8\u5668\u5c31\u4f1a\u8fd0\u884c\uff0c\u754c\u9762\u5373\u662f\u521a\u624d\u5199\u7684 HomePage.py \u3002 \u6216\u4e0d\u9700\u8981\u521b\u5efa\u9879\u76ee\uff0c\u4f7f\u7528\u5b98\u65b9\u63d0\u4f9b\u4e00\u4e2a\u7b80\u6613\u7684Demo $ streamlit hello \u4f7f\u7528\u6848\u4f8b \u6bd4\u5982\u6211\u4eec\u8bad\u7ec3\u4e86\u4e00\u4e2aSeq2seq\u7684\u6587\u5b57\u7ea0\u9519\u6a21\u578b model \uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u6709\u9519\u7684\u5b57\u7b26\u4e32 str \u4f5c\u4e3a\u8f93\u5165\uff0c\u8fd4\u56de\u4e00\u4e2a\u4fee\u6b63\u4e4b\u540e\u7684\u5b57\u7b26\u4e32 str \uff0c\u6211\u60f3\u8981\u5c06\u8fd9\u4e2a\u6a21\u578b\u53ef\u89c6\u5316\u7684\u5448\u73b0\u51fa\u6765\uff0c\u90a3\u4e48\u6211\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a Seq2Seq.py 1 2 3 4 5 6 7 8 9 import streamlit as st # \u4e3aApp\u6dfb\u52a0\u6807\u9898 st . title ( \"\u7b80\u5355\u8bed\u8a00\u7ea0\u9519\u6a21\u578b\" ) # \u663e\u793a\u52a0\u8f7d\u6a21\u578b\u7684\u63d0\u793a st . write ( \"Loading model...\" ) model = torch . load ( 'model.pth' ) # \u663e\u793a\u52a0\u8f7d\u6a21\u578b\u7684\u63d0\u793a st . write ( \"Model loaded!\" ) # \u663e\u793a\u6a21\u578b\u52a0\u8f7d\u5b8c\u6210\u7684\u63d0\u793a \u63a5\u7740\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u7528\u6237\u5199\u4e00\u4e2a\u8f93\u5165\u6846\uff0c\u8ba9\u7528\u6237\u8f93\u5165\u6709\u9519\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5c06\u5176\u4f20\u5165\u6a21\u578b\u4e2d\uff0c\u5f97\u5230\u4fee\u6b63\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u663e\u793a\u51fa\u6765\uff1a Seq2Seq.py 1 2 3 4 5 6 7 8 9 # \u7528\u6237\u8f93\u5165\u6846\u548c\u786e\u8ba4\u6309\u94ae user_input = st . text_area ( \"\u8bf7\u8f93\u5165\u60a8\u60f3\u8981\u4fee\u6539\u7684\u53e5\u5b50: \" ) enter = st . button ( \"\u786e\u8ba4\" ) # \u6a21\u578b\u9884\u6d4b if enter : with st . spinner ( \"\u6b63\u5728\u4fee\u6b63...\" ): result = model ( user_input ) st . success ( \"\u4fee\u6b63\u7ed3\u679c\u4e3a\uff1a\" , result ) \u8fd9\u6837\uff0c\u7528\u6237\u6bcf\u6b21\u70b9\u51fb \u786e\u8ba4 \u6309\u94ae\uff0c\u5c31\u4f1a\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u4fee\u6b63\u7ed3\u679c\uff0c\u5f53\u6a21\u578b\u63a8\u7406\u7ed3\u675f\u4e4b\u540e\uff0c\u5c31\u4f1a\u5c06\u7ed3\u679c\u5448\u73b0\u51fa\u6765\uff1b\u6211\u4eec\u4fdd\u5b58Seq2Seq.py\uff0c\u7136\u540e\u5728\u547d\u4ee4\u884c\u8fd0\u884c\uff1a $ streamlit run Seq2Seq.py \u9ed8\u8ba4\u6d4f\u89c8\u5668\u5c31\u4f1a\u8fd0\u884c\uff0c\u754c\u9762\u5373\u662f\u521a\u624d\u5199\u7684 Seq2Seq.py \u3002\u8fd9\u4e48\u77ed\u7684\u4ee3\u7801\u6709\u8fd9\u6837\u7684\u6548\u679c\u662f\u4e0d\u662f\u5df2\u7ecf\u5f88\u60ca\u8273\u4e86\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u7f51\u9875\u6682\u65f6\u53ea\u5728\u4f60\u7684\u672c\u5730\u8fd0\u884c\uff0c\u73b0\u5728\u8fd8\u53ef\u4ee5\u901a\u8fc7Stream Community Cloud\u5c06\u8fd9\u4e2a\u7b80\u5355\u7684App\u90e8\u7f72\u5230\u4e91\u7aef\uff0c\u8ba9\u66f4\u591a\u7684\u4eba\u4f7f\u7528\uff0c\u4f60\u53ea\u9700\u8981\uff1a \u5c06\u4f60\u7684\u9879\u76ee\u4e0a\u4f20\u81f3Github\uff1b \u6ce8\u518c\u5e76\u767b\u9646 Streamlit Cloud \uff1b \u70b9\u51fbStreamlit Cloud\u767b\u9646\u540e\u754c\u9762\u7684 New App \uff0c\u5e76\u5c06Github Repository\u7684\u5730\u5740\u586b\u5165\uff0c\u5e76\u586b\u5199 Main file path \u4e3a\u521a\u624d\u6211\u4eec\u6240\u521b\u5efa\u7684 Seq2Seq.py \u70b9\u51fb Deploy\uff01 \uff0c\u5c31\u53ef\u4ee5\u5c06\u4f60\u7684App\u90e8\u7f72\u5230\u4e91\u7aef\u4e86\u3002 \u5e38\u7528API Streamlit\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684API\u63a5\u53e3\uff0c\u4f60\u53ef\u4ee5\u5728 \u5b98\u65b9\u6587\u6863 \u4e2d\u67e5\u5230\u4e0b\u8fb9\u8fd9\u4e9bAPI\u7684\u4f7f\u7528Demo\uff0c\u5b83\u4eec\u5404\u81ea\u90fd\u53ef\u4ee5\u7528\u6781\u5c11\u7684\u4ee3\u7801\u521b\u5efa\u51fa\u5bf9\u5e94\u7c7b\u578b\u7684\u5143\u7d20\uff1a \u6587\u672c Markdown \u4ee3\u7801\u5757 \u9884\u7f6e\u683c\u5f0f\u6587\u672c LaTeX \u5206\u5272\u7ebf \u591a\u5a92\u4f53 \u56fe\u7247 \u97f3\u9891 \u89c6\u9891 \u6570\u636e\u5c55\u793a Pandas\u6570\u636e\u5e27 \u9759\u6001\u8868\u683c \u6307\u6807 \u5b57\u5178\u6216JSON\u683c\u5f0f\u7684\u6570\u636e \u66f2\u7ebf \u6298\u7ebf\u56fe \u9762\u79ef\u56fe \u67f1\u72b6\u56fe \u6563\u70b9\u56fe Matplotlib\u3001Altair\u3001Vega-Lite\u7b49\u7ed8\u56fe\u5e93 ... \u8f93\u5165\u7ec4\u4ef6 \u6309\u94ae \u6570\u5b57\u7f16\u8f91\u5668 \u4e0b\u8f7d \u4e0a\u4f20 \u68c0\u67e5\u6846\u3001\u9009\u62e9\u6846\u3001\u591a\u9009\u6846\u3001\u6ed1\u52a8\uff08\u9009\u62e9\uff09\u6761 \u6587\u672c\u8f93\u5165\u6761 ... \u66f4\u591aAPI \u9664\u4e86\u8fd9\u4e9b\u5e38\u7528\u7684\u4ea4\u4e92\u7ec4\u4ef6\u4ee5\u5916\uff0cStreamlit\u8fd8\u63d0\u4f9b\u6392\u7248\u5bb9\u5668(Layouts and containers)\u3001\u8fdb\u5ea6\u6761\u548c\u72b6\u6001(Progress and status)\u3001\u6d41\u63a7\u5236(Control flow)\uff0c\u7f13\u5b58(Cache\u5e93)\u7b49\u5176\u4ed6\u597d\u7528\u7684API\uff0c\u9664\u4e86\u8fd9\u4e9b\u4ee5\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u66f4\u590d\u6742\u7684\u7ec4\u4ef6\u53ef\u4ee5\u5e2e\u52a9\u4f60\u8fdb\u884c\u7528\u6237\u767b\u9646\u3001\u6dfb\u52a0\u8bc4\u8bba\u533a\u7b49\u66f4\u590d\u6742\u7684\u529f\u80fd\uff0c\u8bf7\u53c2\u89c1 API\u6587\u6863 \u3002 \u5f00\u6e90\u6a21\u7248 Streamlit\u8fd8\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u5f00\u6e90\u6a21\u7248\uff0c\u8fd9\u4e9b\u6a21\u7248\u7684\u7c7b\u578b\u5305\u62ec\u79d1\u5b66\u548c\u6280\u672f\u4ecb\u7ecd\u3001\u81ea\u7136\u8bed\u8a00\u5904\u7406\u3001CV\u5e94\u7528\u7b49\u3002\u4f60\u53ef\u4ee5\u5728 Streamlit Gallery \u4e2d\u67e5\u770b\u8fd9\u4e9b\u6a21\u7248\u7684\u6548\u679c\u5e76\u8ba9\u5b83\u4eec\u4e3a\u4f60\u6240\u7528\uff0c\u53ea\u9700\u8981\u6539\u6b63\u5c11\u91cf\u7684\u4ee3\u7801\u5373\u53ef\u3002 \u200b","title":"Streamlit\uff1a\u7528Python\u5199\u4e00\u4e2a\u7b80\u6613\u3001\u7f8e\u89c2\u7684App\u5e76\u514d\u8d39\u90e8\u7f72\uff01"},{"location":"blogs/streamlit/#streamlit","text":"\u4ee5Python\u4e3a\u57fa\u7840\u5f00\u53d1\u8bed\u8a00\u7684\u5f00\u53d1\u8005\uff0c\u7279\u522b\u662f\u7b97\u6cd5\u5de5\u7a0b\u5e08\u4eec\u7684\u4e00\u4e2a\u75db\u70b9\u662f \u5f00\u53d1\u5185\u5bb9\u7684\u7f8e\u89c2\u5448\u73b0 \u3002\u6211\u5728\u5199\u4e00\u4e2a\u7a0b\u5e8f\u65f6\u60f3\u5b8c\u6210\u7684\u4e0d\u4ec5\u662f\u7a0b\u5e8f\u7684\u6838\u5fc3\u903b\u8f91\uff0c\u7406\u60f3\u4e2d\u7684\u72b6\u6001\u662f\uff0c\u6211\u80fd\u901a\u8fc7Python\u7b80\u5355\u7684\u51e0\u884c\u4ee3\u7801\uff0c\u5c31\u5c06\u81ea\u5df1\u7684\u7a0b\u5e8f\u5199\u6210\u4e00\u4e2a\u53ef\u4ea4\u4e92\u7684\u7f8e\u89c2\u7684App\u6216\u8005\u7f51\u9875\u3002 Streamlit \u8ba9\u4f60\u53ef\u4ee5\u4e0d\u7528\u5199HTML\uff0cCSS\uff0cJS\uff0c\u5c31\u80fd\u8f7b\u677e\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u6807\uff0c\u5b83\u57fa\u4e8eGithub\u7684\u9879\u76ee\u4ed3\u5e93\u8fdb\u884c\u7248\u672c\u7ba1\u7406\uff0c\u5e76\u4e14\u53ef\u4ee5 \u514d\u8d39\u7684\u8fdb\u884cApp\u90e8\u7f72 \u3002 \u9664\u6b64\u4ee5\u5916\uff0c\u5b83\u6709\u8bf8\u591a\u4f18\u70b9\uff1a \u5f00\u6e90 \u9ad8\u5ea6\u96c6\u6210\u6613\u7528\u7684API\u63a5\u53e3 \u4e30\u5bcc\u7684\u6a21\u7248\u5e93","title":"Streamlit"},{"location":"blogs/streamlit/#_1","text":"","title":"\u5b89\u88c5\u548c\u5feb\u901f\u4f7f\u7528"},{"location":"blogs/streamlit/#_2","text":"$ pip install streamit","title":"\u5b89\u88c5"},{"location":"blogs/streamlit/#_3","text":"Streamlit\u4e2d\uff0c\u4e00\u4e2a\u9875\u9762\u7531\u4e00\u4e2a.py\u811a\u672c\u521b\u5efa\uff0c\u56e0\u6b64\u4f60\u7684\u6587\u4ef6\u6811\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a -- ProjectName -- HomePage.py \u6253\u5f00HomePage.py\uff0c\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u5f00\u59cb\u754c\u9762\uff1a HomePage.py 1 2 import streamlit as st st . title ( \"Hello World\" ) \u7ed3\u675f\u540e\u4fdd\u5b58\uff0c\u7136\u540e\u5728\u547d\u4ee4\u884c\u8fd0\u884c $ streamlit run HomePage.py \u9ed8\u8ba4\u6d4f\u89c8\u5668\u5c31\u4f1a\u8fd0\u884c\uff0c\u754c\u9762\u5373\u662f\u521a\u624d\u5199\u7684 HomePage.py \u3002 \u6216\u4e0d\u9700\u8981\u521b\u5efa\u9879\u76ee\uff0c\u4f7f\u7528\u5b98\u65b9\u63d0\u4f9b\u4e00\u4e2a\u7b80\u6613\u7684Demo $ streamlit hello","title":"\u5feb\u901f\u4f7f\u7528"},{"location":"blogs/streamlit/#_4","text":"\u6bd4\u5982\u6211\u4eec\u8bad\u7ec3\u4e86\u4e00\u4e2aSeq2seq\u7684\u6587\u5b57\u7ea0\u9519\u6a21\u578b model \uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u6709\u9519\u7684\u5b57\u7b26\u4e32 str \u4f5c\u4e3a\u8f93\u5165\uff0c\u8fd4\u56de\u4e00\u4e2a\u4fee\u6b63\u4e4b\u540e\u7684\u5b57\u7b26\u4e32 str \uff0c\u6211\u60f3\u8981\u5c06\u8fd9\u4e2a\u6a21\u578b\u53ef\u89c6\u5316\u7684\u5448\u73b0\u51fa\u6765\uff0c\u90a3\u4e48\u6211\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a Seq2Seq.py 1 2 3 4 5 6 7 8 9 import streamlit as st # \u4e3aApp\u6dfb\u52a0\u6807\u9898 st . title ( \"\u7b80\u5355\u8bed\u8a00\u7ea0\u9519\u6a21\u578b\" ) # \u663e\u793a\u52a0\u8f7d\u6a21\u578b\u7684\u63d0\u793a st . write ( \"Loading model...\" ) model = torch . load ( 'model.pth' ) # \u663e\u793a\u52a0\u8f7d\u6a21\u578b\u7684\u63d0\u793a st . write ( \"Model loaded!\" ) # \u663e\u793a\u6a21\u578b\u52a0\u8f7d\u5b8c\u6210\u7684\u63d0\u793a \u63a5\u7740\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u7528\u6237\u5199\u4e00\u4e2a\u8f93\u5165\u6846\uff0c\u8ba9\u7528\u6237\u8f93\u5165\u6709\u9519\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5c06\u5176\u4f20\u5165\u6a21\u578b\u4e2d\uff0c\u5f97\u5230\u4fee\u6b63\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\uff0c\u6700\u540e\u5c06\u7ed3\u679c\u663e\u793a\u51fa\u6765\uff1a Seq2Seq.py 1 2 3 4 5 6 7 8 9 # \u7528\u6237\u8f93\u5165\u6846\u548c\u786e\u8ba4\u6309\u94ae user_input = st . text_area ( \"\u8bf7\u8f93\u5165\u60a8\u60f3\u8981\u4fee\u6539\u7684\u53e5\u5b50: \" ) enter = st . button ( \"\u786e\u8ba4\" ) # \u6a21\u578b\u9884\u6d4b if enter : with st . spinner ( \"\u6b63\u5728\u4fee\u6b63...\" ): result = model ( user_input ) st . success ( \"\u4fee\u6b63\u7ed3\u679c\u4e3a\uff1a\" , result ) \u8fd9\u6837\uff0c\u7528\u6237\u6bcf\u6b21\u70b9\u51fb \u786e\u8ba4 \u6309\u94ae\uff0c\u5c31\u4f1a\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u4fee\u6b63\u7ed3\u679c\uff0c\u5f53\u6a21\u578b\u63a8\u7406\u7ed3\u675f\u4e4b\u540e\uff0c\u5c31\u4f1a\u5c06\u7ed3\u679c\u5448\u73b0\u51fa\u6765\uff1b\u6211\u4eec\u4fdd\u5b58Seq2Seq.py\uff0c\u7136\u540e\u5728\u547d\u4ee4\u884c\u8fd0\u884c\uff1a $ streamlit run Seq2Seq.py \u9ed8\u8ba4\u6d4f\u89c8\u5668\u5c31\u4f1a\u8fd0\u884c\uff0c\u754c\u9762\u5373\u662f\u521a\u624d\u5199\u7684 Seq2Seq.py \u3002\u8fd9\u4e48\u77ed\u7684\u4ee3\u7801\u6709\u8fd9\u6837\u7684\u6548\u679c\u662f\u4e0d\u662f\u5df2\u7ecf\u5f88\u60ca\u8273\u4e86\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u7f51\u9875\u6682\u65f6\u53ea\u5728\u4f60\u7684\u672c\u5730\u8fd0\u884c\uff0c\u73b0\u5728\u8fd8\u53ef\u4ee5\u901a\u8fc7Stream Community Cloud\u5c06\u8fd9\u4e2a\u7b80\u5355\u7684App\u90e8\u7f72\u5230\u4e91\u7aef\uff0c\u8ba9\u66f4\u591a\u7684\u4eba\u4f7f\u7528\uff0c\u4f60\u53ea\u9700\u8981\uff1a \u5c06\u4f60\u7684\u9879\u76ee\u4e0a\u4f20\u81f3Github\uff1b \u6ce8\u518c\u5e76\u767b\u9646 Streamlit Cloud \uff1b \u70b9\u51fbStreamlit Cloud\u767b\u9646\u540e\u754c\u9762\u7684 New App \uff0c\u5e76\u5c06Github Repository\u7684\u5730\u5740\u586b\u5165\uff0c\u5e76\u586b\u5199 Main file path \u4e3a\u521a\u624d\u6211\u4eec\u6240\u521b\u5efa\u7684 Seq2Seq.py \u70b9\u51fb Deploy\uff01 \uff0c\u5c31\u53ef\u4ee5\u5c06\u4f60\u7684App\u90e8\u7f72\u5230\u4e91\u7aef\u4e86\u3002","title":"\u4f7f\u7528\u6848\u4f8b"},{"location":"blogs/streamlit/#api","text":"Streamlit\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684API\u63a5\u53e3\uff0c\u4f60\u53ef\u4ee5\u5728 \u5b98\u65b9\u6587\u6863 \u4e2d\u67e5\u5230\u4e0b\u8fb9\u8fd9\u4e9bAPI\u7684\u4f7f\u7528Demo\uff0c\u5b83\u4eec\u5404\u81ea\u90fd\u53ef\u4ee5\u7528\u6781\u5c11\u7684\u4ee3\u7801\u521b\u5efa\u51fa\u5bf9\u5e94\u7c7b\u578b\u7684\u5143\u7d20\uff1a \u6587\u672c Markdown \u4ee3\u7801\u5757 \u9884\u7f6e\u683c\u5f0f\u6587\u672c LaTeX \u5206\u5272\u7ebf \u591a\u5a92\u4f53 \u56fe\u7247 \u97f3\u9891 \u89c6\u9891 \u6570\u636e\u5c55\u793a Pandas\u6570\u636e\u5e27 \u9759\u6001\u8868\u683c \u6307\u6807 \u5b57\u5178\u6216JSON\u683c\u5f0f\u7684\u6570\u636e \u66f2\u7ebf \u6298\u7ebf\u56fe \u9762\u79ef\u56fe \u67f1\u72b6\u56fe \u6563\u70b9\u56fe Matplotlib\u3001Altair\u3001Vega-Lite\u7b49\u7ed8\u56fe\u5e93 ... \u8f93\u5165\u7ec4\u4ef6 \u6309\u94ae \u6570\u5b57\u7f16\u8f91\u5668 \u4e0b\u8f7d \u4e0a\u4f20 \u68c0\u67e5\u6846\u3001\u9009\u62e9\u6846\u3001\u591a\u9009\u6846\u3001\u6ed1\u52a8\uff08\u9009\u62e9\uff09\u6761 \u6587\u672c\u8f93\u5165\u6761 ... \u66f4\u591aAPI \u9664\u4e86\u8fd9\u4e9b\u5e38\u7528\u7684\u4ea4\u4e92\u7ec4\u4ef6\u4ee5\u5916\uff0cStreamlit\u8fd8\u63d0\u4f9b\u6392\u7248\u5bb9\u5668(Layouts and containers)\u3001\u8fdb\u5ea6\u6761\u548c\u72b6\u6001(Progress and status)\u3001\u6d41\u63a7\u5236(Control flow)\uff0c\u7f13\u5b58(Cache\u5e93)\u7b49\u5176\u4ed6\u597d\u7528\u7684API\uff0c\u9664\u4e86\u8fd9\u4e9b\u4ee5\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u66f4\u590d\u6742\u7684\u7ec4\u4ef6\u53ef\u4ee5\u5e2e\u52a9\u4f60\u8fdb\u884c\u7528\u6237\u767b\u9646\u3001\u6dfb\u52a0\u8bc4\u8bba\u533a\u7b49\u66f4\u590d\u6742\u7684\u529f\u80fd\uff0c\u8bf7\u53c2\u89c1 API\u6587\u6863 \u3002","title":"\u5e38\u7528API"},{"location":"blogs/streamlit/#_5","text":"Streamlit\u8fd8\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u5f00\u6e90\u6a21\u7248\uff0c\u8fd9\u4e9b\u6a21\u7248\u7684\u7c7b\u578b\u5305\u62ec\u79d1\u5b66\u548c\u6280\u672f\u4ecb\u7ecd\u3001\u81ea\u7136\u8bed\u8a00\u5904\u7406\u3001CV\u5e94\u7528\u7b49\u3002\u4f60\u53ef\u4ee5\u5728 Streamlit Gallery \u4e2d\u67e5\u770b\u8fd9\u4e9b\u6a21\u7248\u7684\u6548\u679c\u5e76\u8ba9\u5b83\u4eec\u4e3a\u4f60\u6240\u7528\uff0c\u53ea\u9700\u8981\u6539\u6b63\u5c11\u91cf\u7684\u4ee3\u7801\u5373\u53ef\u3002 \u200b","title":"\u5f00\u6e90\u6a21\u7248"}]}